import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import * as ɵngcc0 from '@angular/core';
var LocationAccuracy = /** @class */ (function (_super) {
    __extends(LocationAccuracy, _super);
    function LocationAccuracy() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Convenience constant
         * @type {number}
         */
        _this.REQUEST_PRIORITY_NO_POWER = 0;
        /**
         * Convenience constant
         * @type {number}
         */
        _this.REQUEST_PRIORITY_LOW_POWER = 1;
        /**
         * Convenience constant
         * @type {number}
         */
        _this.REQUEST_PRIORITY_BALANCED_POWER_ACCURACY = 2;
        /**
         * Convenience constant
         * @type {number}
         */
        _this.REQUEST_PRIORITY_HIGH_ACCURACY = 3;
        /**
         * Convenience constant
         * @type {number}
         */
        _this.SUCCESS_SETTINGS_SATISFIED = 0;
        /**
         * Convenience constant
         * @type {number}
         */
        _this.SUCCESS_USER_AGREED = 1;
        /**
         * Convenience constant
         * @type {number}
         */
        _this.ERROR_ALREADY_REQUESTING = -1;
        /**
         * Convenience constant
         * @type {number}
         */
        _this.ERROR_INVALID_ACTION = 0;
        /**
         * Convenience constant
         * @type {number}
         */
        _this.ERROR_INVALID_ACCURACY = 1;
        /**
         * Convenience constant
         * @type {number}
         */
        _this.ERROR_EXCEPTION = 1;
        /**
         * Convenience constant
         * @type {number}
         */
        _this.ERROR_CANNOT_CHANGE_ACCURACY = 3;
        /**
         * Convenience constant
         * @type {number}
         */
        _this.ERROR_USER_DISAGREED = 4;
        /**
         * Convenience constant
         * @type {number}
         */
        _this.ERROR_GOOGLE_API_CONNECTION_FAILED = 4;
        return _this;
    }
    LocationAccuracy.prototype.canRequest = function () { return cordova(this, "canRequest", {}, arguments); };
    LocationAccuracy.prototype.isRequesting = function () { return cordova(this, "isRequesting", {}, arguments); };
    LocationAccuracy.prototype.request = function (accuracy) { return cordova(this, "request", { "callbackOrder": "reverse" }, arguments); };
    LocationAccuracy.pluginName = "LocationAccuracy";
    LocationAccuracy.plugin = "cordova-plugin-request-location-accuracy";
    LocationAccuracy.pluginRef = "cordova.plugins.locationAccuracy";
    LocationAccuracy.repo = "https://github.com/dpa99c/cordova-plugin-request-location-accuracy";
    LocationAccuracy.platforms = ["Android", "iOS"];
LocationAccuracy.ɵfac = /*@__PURE__*/ function () { var ɵLocationAccuracy_BaseFactory; return function LocationAccuracy_Factory(t) { return (ɵLocationAccuracy_BaseFactory || (ɵLocationAccuracy_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(LocationAccuracy)))(t || LocationAccuracy); }; }();
LocationAccuracy.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: LocationAccuracy, factory: function (t) { return LocationAccuracy.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LocationAccuracy, [{
        type: Injectable
    }], null, null); })();
    return LocationAccuracy;
}(IonicNativePlugin));
export { LocationAccuracy };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9AaW9uaWMtbmF0aXZlL3BsdWdpbnMvbG9jYXRpb24tYWNjdXJhY3kvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7O0FBQ3hFO0FBSVUsSUFnQzRCLG9DQUFpQjtBQUFDO0FBR3hEO0FBSWEsUUFOWDtBQUNGO0FBQ007QUFFQSxXQUREO0FBQ0wsUUFBRSwrQkFBeUIsR0FBRyxDQUFDLENBQUM7QUFDaEMsUUFBRTtBQUNGO0FBQ007QUFFQSxXQUREO0FBQ0wsUUFBRSxnQ0FBMEIsR0FBRyxDQUFDLENBQUM7QUFDakMsUUFBRTtBQUNGO0FBQ007QUFFQSxXQUREO0FBQ0wsUUFBRSw4Q0FBd0MsR0FBRyxDQUFDLENBQUM7QUFDL0MsUUFBRTtBQUNGO0FBQ007QUFFQSxXQUREO0FBQ0wsUUFBRSxvQ0FBOEIsR0FBRyxDQUFDLENBQUM7QUFDckMsUUFBRTtBQUNGO0FBQ007QUFFQSxXQUREO0FBQ0wsUUFBRSxnQ0FBMEIsR0FBRyxDQUFDLENBQUM7QUFDakMsUUFBRTtBQUNGO0FBQ007QUFFQSxXQUREO0FBQ0wsUUFBRSx5QkFBbUIsR0FBRyxDQUFDLENBQUM7QUFDMUIsUUFBRTtBQUNGO0FBQ007QUFFQSxXQUREO0FBQ0wsUUFBRSw4QkFBd0IsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNoQyxRQUFFO0FBQ0Y7QUFDTTtBQUVBLFdBREQ7QUFDTCxRQUFFLDBCQUFvQixHQUFHLENBQUMsQ0FBQztBQUMzQixRQUFFO0FBQ0Y7QUFDTTtBQUVBLFdBREQ7QUFDTCxRQUFFLDRCQUFzQixHQUFHLENBQUMsQ0FBQztBQUM3QixRQUFFO0FBQ0Y7QUFDTTtBQUVBLFdBREQ7QUFDTCxRQUFFLHFCQUFlLEdBQUcsQ0FBQyxDQUFDO0FBQ3RCLFFBQUU7QUFDRjtBQUNNO0FBRUEsV0FERDtBQUNMLFFBQUUsa0NBQTRCLEdBQUcsQ0FBQyxDQUFDO0FBQ25DLFFBQUU7QUFDRjtBQUNNO0FBRUEsV0FERDtBQUNMLFFBQUUsMEJBQW9CLEdBQUcsQ0FBQyxDQUFDO0FBQzNCLFFBQUU7QUFDRjtBQUNNO0FBRUEsV0FERDtBQUNMLFFBQUUsd0NBQWtDLEdBQUcsQ0FBQyxDQUFDO0FBQ3pDO0FBRWU7QUFBTSxJQUluQixxQ0FBVTtBQUthLElBSXZCLHVDQUFZO0FBS2EsSUFLekIsa0NBQU8sYUFBQyxRQUFnQjtBQUlxQjtBQUFzRDtBQUEwRTtBQUFxRTtBQUFrRztvREFoR3JWLFVBQVU7Ozs7MEJBQ0w7QUFBQywyQkF0Q1A7QUFBRSxFQXNDb0MsaUJBQWlCO0FBQ3RELFNBRFksZ0JBQWdCO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcblxuLyoqXG4gKiBAbmFtZSBMb2NhdGlvbiBBY2N1cmFjeVxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIENvcmRvdmEvUGhvbmVnYXAgcGx1Z2luIGZvciBBbmRyb2lkIGFuZCBpT1MgdG8gcmVxdWVzdCBlbmFibGluZy9jaGFuZ2luZyBvZiBMb2NhdGlvbiBTZXJ2aWNlcyBieSB0cmlnZ2VyaW5nIGEgbmF0aXZlIGRpYWxvZyBmcm9tIHdpdGhpbiB0aGUgYXBwLCBhdm9pZGluZyB0aGUgbmVlZCBmb3IgdGhlIHVzZXIgdG8gbGVhdmUgeW91ciBhcHAgdG8gY2hhbmdlIGxvY2F0aW9uIHNldHRpbmdzIG1hbnVhbGx5LlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgTG9jYXRpb25BY2N1cmFjeSB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvbG9jYXRpb24tYWNjdXJhY3kvbmd4JztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGxvY2F0aW9uQWNjdXJhY3k6IExvY2F0aW9uQWNjdXJhY3kpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIHRoaXMubG9jYXRpb25BY2N1cmFjeS5jYW5SZXF1ZXN0KCkudGhlbigoY2FuUmVxdWVzdDogYm9vbGVhbikgPT4ge1xuICpcbiAqICAgaWYoY2FuUmVxdWVzdCkge1xuICogICAgIC8vIHRoZSBhY2N1cmFjeSBvcHRpb24gd2lsbCBiZSBpZ25vcmVkIGJ5IGlPU1xuICogICAgIHRoaXMubG9jYXRpb25BY2N1cmFjeS5yZXF1ZXN0KHRoaXMubG9jYXRpb25BY2N1cmFjeS5SRVFVRVNUX1BSSU9SSVRZX0hJR0hfQUNDVVJBQ1kpLnRoZW4oXG4gKiAgICAgICAoKSA9PiBjb25zb2xlLmxvZygnUmVxdWVzdCBzdWNjZXNzZnVsJyksXG4gKiAgICAgICBlcnJvciA9PiBjb25zb2xlLmxvZygnRXJyb3IgcmVxdWVzdGluZyBsb2NhdGlvbiBwZXJtaXNzaW9ucycsIGVycm9yKVxuICogICAgICk7XG4gKiAgIH1cbiAqXG4gKiB9KTtcbiAqXG4gKiBgYGBcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdMb2NhdGlvbkFjY3VyYWN5JyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tcmVxdWVzdC1sb2NhdGlvbi1hY2N1cmFjeScsXG4gIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2lucy5sb2NhdGlvbkFjY3VyYWN5JyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9kcGE5OWMvY29yZG92YS1wbHVnaW4tcmVxdWVzdC1sb2NhdGlvbi1hY2N1cmFjeScsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBMb2NhdGlvbkFjY3VyYWN5IGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogQ29udmVuaWVuY2UgY29uc3RhbnRcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIFJFUVVFU1RfUFJJT1JJVFlfTk9fUE9XRVIgPSAwO1xuICAvKipcbiAgICogQ29udmVuaWVuY2UgY29uc3RhbnRcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIFJFUVVFU1RfUFJJT1JJVFlfTE9XX1BPV0VSID0gMTtcbiAgLyoqXG4gICAqIENvbnZlbmllbmNlIGNvbnN0YW50XG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICBSRVFVRVNUX1BSSU9SSVRZX0JBTEFOQ0VEX1BPV0VSX0FDQ1VSQUNZID0gMjtcbiAgLyoqXG4gICAqIENvbnZlbmllbmNlIGNvbnN0YW50XG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICBSRVFVRVNUX1BSSU9SSVRZX0hJR0hfQUNDVVJBQ1kgPSAzO1xuICAvKipcbiAgICogQ29udmVuaWVuY2UgY29uc3RhbnRcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIFNVQ0NFU1NfU0VUVElOR1NfU0FUSVNGSUVEID0gMDtcbiAgLyoqXG4gICAqIENvbnZlbmllbmNlIGNvbnN0YW50XG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICBTVUNDRVNTX1VTRVJfQUdSRUVEID0gMTtcbiAgLyoqXG4gICAqIENvbnZlbmllbmNlIGNvbnN0YW50XG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICBFUlJPUl9BTFJFQURZX1JFUVVFU1RJTkcgPSAtMTtcbiAgLyoqXG4gICAqIENvbnZlbmllbmNlIGNvbnN0YW50XG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICBFUlJPUl9JTlZBTElEX0FDVElPTiA9IDA7XG4gIC8qKlxuICAgKiBDb252ZW5pZW5jZSBjb25zdGFudFxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgRVJST1JfSU5WQUxJRF9BQ0NVUkFDWSA9IDE7XG4gIC8qKlxuICAgKiBDb252ZW5pZW5jZSBjb25zdGFudFxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgRVJST1JfRVhDRVBUSU9OID0gMTtcbiAgLyoqXG4gICAqIENvbnZlbmllbmNlIGNvbnN0YW50XG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICBFUlJPUl9DQU5OT1RfQ0hBTkdFX0FDQ1VSQUNZID0gMztcbiAgLyoqXG4gICAqIENvbnZlbmllbmNlIGNvbnN0YW50XG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICBFUlJPUl9VU0VSX0RJU0FHUkVFRCA9IDQ7XG4gIC8qKlxuICAgKiBDb252ZW5pZW5jZSBjb25zdGFudFxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgRVJST1JfR09PR0xFX0FQSV9DT05ORUNUSU9OX0ZBSUxFRCA9IDQ7XG5cbiAgLyoqXG4gICAqIEluZGljYXRlcyBpZiB5b3UgY2FuIHJlcXVlc3QgYWNjdXJhdGUgbG9jYXRpb25cbiAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb3ZsZXMgd2l0aCBhIGJvb2xlYW4gdGhhdCBpbmRpY2F0ZXMgaWYgeW91IGNhbiByZXF1ZXN0IGFjY3VyYXRlIGxvY2F0aW9uXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGNhblJlcXVlc3QoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEluZGljYXRlcyBpZiBhIHJlcXVlc3QgaXMgY3VycmVudGx5IGluIHByb2dyZXNzXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYSBib29sZWFuIHRoYXQgaW5kaWNhdGVzIGlmIGEgcmVxdWVzdCBpcyBjdXJyZW50bHkgaW4gcHJvZ3Jlc3NcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaXNSZXF1ZXN0aW5nKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXF1ZXN0cyBhY2N1cmF0ZSBsb2NhdGlvblxuICAgKiBAcGFyYW0gYWNjdXJhY3kge251bWJlcn0gQWNjdXJhY3ksIGZyb20gMCB0byA0LiBZb3UgY2FuIHVzZSB0aGUgc3RhdGljIHByb3BlcnRpZXMgb2YgdGhpcyBjbGFzcyB0aGF0IHN0YXJ0IHdpdGggUkVRVUVTVF9QUklPUklUWV9cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyBvbiBzdWNjZXNzIGFuZCByZWplY3RzIGlmIGFuIGVycm9yIG9jY3VycmVkXG4gICAqL1xuICBAQ29yZG92YSh7IGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyB9KVxuICByZXF1ZXN0KGFjY3VyYWN5OiBudW1iZXIpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19