import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import * as ɵngcc0 from '@angular/core';
var Appsflyer = /** @class */ (function (_super) {
    __extends(Appsflyer, _super);
    function Appsflyer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Appsflyer.prototype.initSdk = function (options) { return cordova(this, "initSdk", {}, arguments); };
    Appsflyer.prototype.logEvent = function (eventName, eventValues) { return cordova(this, "logEvent", {}, arguments); };
    Appsflyer.prototype.setAppUserId = function (customerUserId) { return cordova(this, "setAppUserId", { "sync": true }, arguments); };
    Appsflyer.prototype.Stop = function (isStopTracking) { return cordova(this, "Stop", { "sync": true }, arguments); };
    Appsflyer.prototype.registerOnAppOpenAttribution = function () { return cordova(this, "registerOnAppOpenAttribution", {}, arguments); };
    Appsflyer.prototype.enableUninstallTracking = function (token) { return cordova(this, "enableUninstallTracking", {}, arguments); };
    Appsflyer.prototype.updateServerUninstallToken = function (token) { return cordova(this, "updateServerUninstallToken", { "sync": true }, arguments); };
    Appsflyer.prototype.registerUninstall = function (token) { return cordova(this, "registerUninstall", { "sync": true }, arguments); };
    Appsflyer.prototype.getAppsFlyerUID = function () { return cordova(this, "getAppsFlyerUID", {}, arguments); };
    Appsflyer.prototype.anonymizeUser = function (disable) { return cordova(this, "anonymizeUser", { "sync": true }, arguments); };
    Appsflyer.prototype.setAppInviteOneLinkID = function (oneLinkId) { return cordova(this, "setAppInviteOneLinkID", { "sync": true }, arguments); };
    Appsflyer.prototype.generateInviteLink = function (options) { return cordova(this, "generateInviteLink", {}, arguments); };
    Appsflyer.prototype.logCrossPromotionImpression = function (appId, campaign) { return cordova(this, "logCrossPromotionImpression", { "sync": true }, arguments); };
    Appsflyer.prototype.logCrossPromotionAndOpenStore = function (appId, campaign, options) { return cordova(this, "logCrossPromotionAndOpenStore", { "sync": true }, arguments); };
    Appsflyer.pluginName = "Appsflyer";
    Appsflyer.plugin = "cordova-plugin-appsflyer-sdk";
    Appsflyer.pluginRef = "window.plugins.appsFlyer";
    Appsflyer.repo = "https://github.com/AppsFlyerSDK/cordova-plugin-appsflyer-sdk";
    Appsflyer.platforms = ["iOS", "Android"];
    Appsflyer.install = "Add to config.xml like stated on github and then start";
Appsflyer.ɵfac = /*@__PURE__*/ function () { var ɵAppsflyer_BaseFactory; return function Appsflyer_Factory(t) { return (ɵAppsflyer_BaseFactory || (ɵAppsflyer_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(Appsflyer)))(t || Appsflyer); }; }();
Appsflyer.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: Appsflyer, factory: function (t) { return Appsflyer.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Appsflyer, [{
        type: Injectable
    }], null, null); })();
    return Appsflyer;
}(IonicNativePlugin));
export { Appsflyer };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,