import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import * as ɵngcc0 from '@angular/core';
var DatePicker = /** @class */ (function (_super) {
    __extends(DatePicker, _super);
    function DatePicker() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * @hidden
         */
        _this.ANDROID_THEMES = {
            THEME_TRADITIONAL: 1,
            THEME_HOLO_DARK: 2,
            THEME_HOLO_LIGHT: 3,
            THEME_DEVICE_DEFAULT_DARK: 4,
            THEME_DEVICE_DEFAULT_LIGHT: 5,
        };
        return _this;
    }
    DatePicker.prototype.show = function (options) { return cordova(this, "show", {}, arguments); };
    DatePicker.pluginName = "DatePicker";
    DatePicker.plugin = "cordova-plugin-datepicker";
    DatePicker.pluginRef = "datePicker";
    DatePicker.repo = "https://github.com/VitaliiBlagodir/cordova-plugin-datepicker";
    DatePicker.platforms = ["Android", "iOS", "Windows"];
DatePicker.ɵfac = /*@__PURE__*/ function () { var ɵDatePicker_BaseFactory; return function DatePicker_Factory(t) { return (ɵDatePicker_BaseFactory || (ɵDatePicker_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(DatePicker)))(t || DatePicker); }; }();
DatePicker.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DatePicker, factory: function (t) { return DatePicker.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DatePicker, [{
        type: Injectable
    }], null, null); })();
    return DatePicker;
}(IonicNativePlugin));
export { DatePicker };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9AaW9uaWMtbmF0aXZlL3BsdWdpbnMvZGF0ZS1waWNrZXIvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7O0FBQ3hFO0FBR1EsSUFzSndCLDhCQUFpQjtBQUFDO0FBSWpEO0FBR08sUUFOTjtBQUNGO0FBRUEsV0FESztBQUNMLFFBQUUsb0JBQWMsR0FBRztBQUNuQixZQUFJLGlCQUFpQixFQUFFLENBQUM7QUFDeEIsWUFBSSxlQUFlLEVBQUUsQ0FBQztBQUN0QixZQUFJLGdCQUFnQixFQUFFLENBQUM7QUFDdkIsWUFBSSx5QkFBeUIsRUFBRSxDQUFDO0FBQ2hDLFlBQUksMEJBQTBCLEVBQUUsQ0FBQztBQUNqQyxTQUFHLENBQUM7QUFDSjtBQUVlO0FBQU0sSUFLbkIseUJBQUksYUFBQyxPQUEwQjtBQUlsQjtBQUEwQztBQUFxRDtBQUF5QztBQUFzRjs4Q0F2QjVPLFVBQVU7Ozs7MEJBQ0w7QUFBQyxxQkEzSlA7QUFBRSxFQTJKOEIsaUJBQWlCO0FBQ2hELFNBRFksVUFBVTtBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGF0ZVBpY2tlck9wdGlvbnMge1xuICAvKipcbiAgICogVGhlIG1vZGUgb2YgdGhlIGRhdGUgcGlja2VyXG4gICAqIFZhbHVlczogZGF0ZSB8IHRpbWUgfCBkYXRldGltZVxuICAgKi9cbiAgbW9kZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBTZWxlY3RlZCBkYXRlXG4gICAqL1xuICBkYXRlOiBEYXRlIHwgc3RyaW5nIHwgbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBNaW5pbXVtIGRhdGVcbiAgICogRGVmYXVsdDogZW1wdHkgU3RyaW5nXG4gICAqL1xuICBtaW5EYXRlPzogRGF0ZSB8IHN0cmluZyB8IG51bWJlcjtcblxuICAvKipcbiAgICogTWF4aW11bSBkYXRlXG4gICAqIERlZmF1bHQ6IGVtcHR5IFN0cmluZ1xuICAgKi9cbiAgbWF4RGF0ZT86IERhdGUgfCBzdHJpbmcgfCBudW1iZXI7XG5cbiAgLyoqXG4gICAqIExhYmVsIGZvciB0aGUgZGlhbG9nIHRpdGxlLiBJZiBlbXB0eSwgdXNlcyBhbmRyb2lkIGRlZmF1bHQgKFNldCBkYXRlL1NldCB0aW1lKS5cbiAgICogRGVmYXVsdDogZW1wdHkgU3RyaW5nXG4gICAqL1xuICB0aXRsZVRleHQ/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIExhYmVsIG9mIEJVVFRPTl9QT1NJVElWRSAoZG9uZSBidXR0b24pIG9uIEFuZHJvaWRcbiAgICovXG4gIG9rVGV4dD86IHN0cmluZztcblxuICAvKipcbiAgICogTGFiZWwgb2YgQlVUVE9OX05FR0FUSVZFIChjYW5jZWwgYnV0dG9uKS4gSWYgZW1wdHksIHVzZXMgYW5kcm9pZC5SLnN0cmluZy5jYW5jZWwuXG4gICAqL1xuICBjYW5jZWxUZXh0Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBMYWJlbCBvZiB0b2RheSBidXR0b24uIElmIGVtcHR5LCBkb2Vzbid0IHNob3cgdGhlIG9wdGlvbiB0byBzZWxlY3QgY3VycmVudCBkYXRlLlxuICAgKi9cbiAgdG9kYXlUZXh0Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBMYWJlbCBvZiBub3cgYnV0dG9uLiBJZiBlbXB0eSwgZG9lc24ndCBzaG93IHRoZSBvcHRpb24gdG8gc2VsZWN0IGN1cnJlbnQgdGltZS5cbiAgICovXG4gIG5vd1RleHQ/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFNob3dzIHRpbWUgZGlhbG9nIGluIDI0IGhvdXJzIGZvcm1hdC5cbiAgICovXG4gIGlzMjRIb3VyPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogQ2hvb3NlIHRoZSBBbmRyb2lkIHRoZW1lIGZvciB0aGUgcGlja2VyLiBZb3UgY2FuIHVzZSB0aGUgRGF0ZVBpY2tlci5BTkRST0lEX1RIRU1FUyBwcm9wZXJ0eS5cbiAgICogVmFsdWVzOiAxOiBUSEVNRV9UUkFESVRJT05BTCB8IDI6IFRIRU1FX0hPTE9fREFSSyB8IDM6IFRIRU1FX0hPTE9fTElHSFQgfCA0OiBUSEVNRV9ERVZJQ0VfREVGQVVMVF9EQVJLIHwgNTogVEhFTUVfREVWSUNFX0RFRkFVTFRfTElHSFRcbiAgICovXG4gIGFuZHJvaWRUaGVtZT86IG51bWJlcjtcblxuICAvKipcbiAgICogU2hvd3Mgb3IgaGlkZSBkYXRlcyBlYXJsaWVyIHRoZW4gc2VsZWN0ZWQgZGF0ZS5cbiAgICovXG4gIGFsbG93T2xkRGF0ZXM/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBTaG93cyBvciBoaWRlIGRhdGVzIGFmdGVyIHNlbGVjdGVkIGRhdGUuXG4gICAqL1xuICBhbGxvd0Z1dHVyZURhdGVzPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogTGFiZWwgb2YgZG9uZSBidXR0b24uXG4gICAqL1xuICBkb25lQnV0dG9uTGFiZWw/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEhleCBjb2xvciBvZiBkb25lIGJ1dHRvbi5cbiAgICovXG4gIGRvbmVCdXR0b25Db2xvcj86IHN0cmluZztcblxuICAvKipcbiAgICogTGFiZWwgb2YgY2FuY2VsIGJ1dHRvbi5cbiAgICovXG4gIGNhbmNlbEJ1dHRvbkxhYmVsPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBIZXggY29sb3Igb2YgY2FuY2VsIGJ1dHRvbi5cbiAgICovXG4gIGNhbmNlbEJ1dHRvbkNvbG9yPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBYIHBvc2l0aW9uIG9mIGRhdGUgcGlja2VyLiBUaGUgcG9zaXRpb24gaXMgYWJzb2x1dGUgdG8gdGhlIHJvb3QgdmlldyBvZiB0aGUgYXBwbGljYXRpb24uXG4gICAqL1xuICB4PzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBZIHBvc2l0aW9uIG9mIGRhdGUgcGlja2VyLiBUaGUgcG9zaXRpb24gaXMgYWJzb2x1dGUgdG8gdGhlIHJvb3QgdmlldyBvZiB0aGUgYXBwbGljYXRpb24uXG4gICAqL1xuICB5PzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBJbnRlcnZhbCBiZXR3ZWVuIG9wdGlvbnMgaW4gdGhlIG1pbnV0ZSBzZWN0aW9uIG9mIHRoZSBkYXRlIHBpY2tlci5cbiAgICovXG4gIG1pbnV0ZUludGVydmFsPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBGb3JjZSB0aGUgVUlQb3BvdmVyQXJyb3dEaXJlY3Rpb24gZW51bS4gVGhlIHZhbHVlIGFueSB3aWxsIHJldmVydCB0byBkZWZhdWx0IFVJUG9wb3ZlckFycm93RGlyZWN0aW9uQW55IGFuZCBsZXQgdGhlIGFwcCBjaG9vc2UgdGhlIHByb3BlciBkaXJlY3Rpb24gaXRzZWxmLlxuICAgKi9cbiAgcG9wb3ZlckFycm93RGlyZWN0aW9uPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBGb3JjZSBsb2NhbGUgZm9yIGRhdGVQaWNrZXIuXG4gICAqL1xuICBsb2NhbGU/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogQG5hbWUgRGF0ZSBQaWNrZXJcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIERhdGVQaWNrZXIgcGx1Z2luIGFsbG93cyB0aGUgdXNlciB0byBmZXRjaCBkYXRlIG9yIHRpbWUgdXNpbmcgbmF0aXZlIGRpYWxvZ3MuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBEYXRlUGlja2VyIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9kYXRlLXBpY2tlci9uZ3gnO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgZGF0ZVBpY2tlcjogRGF0ZVBpY2tlcikgeyB9XG4gKlxuICpcbiAqIC4uLlxuICpcbiAqXG4gKiB0aGlzLmRhdGVQaWNrZXIuc2hvdyh7XG4gKiAgIGRhdGU6IG5ldyBEYXRlKCksXG4gKiAgIG1vZGU6ICdkYXRlJyxcbiAqICAgYW5kcm9pZFRoZW1lOiB0aGlzLmRhdGVQaWNrZXIuQU5EUk9JRF9USEVNRVMuVEhFTUVfSE9MT19EQVJLXG4gKiB9KS50aGVuKFxuICogICBkYXRlID0+IGNvbnNvbGUubG9nKCdHb3QgZGF0ZTogJywgZGF0ZSksXG4gKiAgIGVyciA9PiBjb25zb2xlLmxvZygnRXJyb3Igb2NjdXJyZWQgd2hpbGUgZ2V0dGluZyBkYXRlOiAnLCBlcnIpXG4gKiApO1xuICogYGBgXG4gKiBAaW50ZXJmYWNlc1xuICogRGF0ZVBpY2tlck9wdGlvbnNcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdEYXRlUGlja2VyJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tZGF0ZXBpY2tlcicsXG4gIHBsdWdpblJlZjogJ2RhdGVQaWNrZXInLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL1ZpdGFsaWlCbGFnb2Rpci9jb3Jkb3ZhLXBsdWdpbi1kYXRlcGlja2VyJyxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJywgJ1dpbmRvd3MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRGF0ZVBpY2tlciBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIEBoaWRkZW5cbiAgICovXG4gIEFORFJPSURfVEhFTUVTID0ge1xuICAgIFRIRU1FX1RSQURJVElPTkFMOiAxLFxuICAgIFRIRU1FX0hPTE9fREFSSzogMixcbiAgICBUSEVNRV9IT0xPX0xJR0hUOiAzLFxuICAgIFRIRU1FX0RFVklDRV9ERUZBVUxUX0RBUks6IDQsXG4gICAgVEhFTUVfREVWSUNFX0RFRkFVTFRfTElHSFQ6IDUsXG4gIH07XG5cbiAgLyoqXG4gICAqIFNob3dzIHRoZSBkYXRlIGFuZC9vciB0aW1lIHBpY2tlciBkaWFsb2cocylcbiAgICogQHBhcmFtIHtEYXRlUGlja2VyT3B0aW9uc30gb3B0aW9ucyBPcHRpb25zIGZvciB0aGUgZGF0ZSBwaWNrZXIuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPERhdGU+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIHBpY2tlZCBkYXRlIGFuZC9vciB0aW1lLCBvciByZWplY3RzIHdpdGggYW4gZXJyb3IuXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHNob3cob3B0aW9uczogRGF0ZVBpY2tlck9wdGlvbnMpOiBQcm9taXNlPERhdGU+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==