//
//  GitHub.swift
//  Escape
//
//  Created by Aly Ezz on 10/10/19.
//

import Foundation
import SwiftCLI
import SwiftShell
import FileUtils
import SynchronousNetworking

class GitHub {
    
    enum GitHubError: Error {
        case releaseFailed(String)
        case pullRequestFailed(String)
    }
    
    static let token = ProcessInfo.processInfo.environment["RELEASE_GITHUB_TOKEN"]!
    
    /**
     Publishes the release on Github
     */
    static func publishRelease(repoAt repository: RepositoryName, versionFrom versionPath: VersionFrom) throws {
        let version = Helpers.getVersion(versionFrom: versionPath, omitPrefix: false)
        let changeLog = Helpers.getChangelog()
        
        // Releases as bullet points seperated by line breaks (for github release)
        let gitReleaseNotes = changeLog.joined(separator: "\n")
        
        let networking = SynchronousNetworking(baseUrl: URL(string: Constants.githubApiBaseURL)!)
        let parameters: [String : Any] = ["tag_name": version, "target_commitish": "master", "name": "Release \(version)", "body": gitReleaseNotes, "draft": false, "prerelease": false]
        let headers = ["Content-Type": "application/json", "authorization": "token \(token)"]
        let networkResponse = networking.postSynchronously(path: "\(repository.rawValue)/releases", parameters: parameters, headers: headers)
        if (networkResponse.error != nil || networkResponse.response!.statusCode != 201) {
            print(networkResponse)
            throw GitHubError.releaseFailed("Failed to publish release for the repo: " + repository.rawValue)
        }
    }
    
    static func createPullRequest(repoAt repository: RepositoryName, withTitle title: String, withBody body: String, atHead head: String) throws {
        let networking = SynchronousNetworking(baseUrl: URL(string: Constants.githubApiBaseURL)!)
        let parameters: [String : Any] = ["title": title, "body": body, "head": head, "base": "master"]
        let headers = ["Content-Type": "application/json", "authorization": "token \(token)"]
        let networkResponse = networking.postSynchronously(path: "\(repository.rawValue)/pulls", parameters: parameters, headers: headers)
        if (networkResponse.error != nil || networkResponse.response!.statusCode != 201) {
            print(networkResponse)
            throw GitHubError.pullRequestFailed("Failed to create a pull request for the repo: " + repository.rawValue)
        }
    }
}
