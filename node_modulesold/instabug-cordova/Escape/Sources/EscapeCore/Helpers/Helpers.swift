//
//  Helpers.swift
//  Escape
//
//  Created by SalmaAli on 8/1/18.
//

import Foundation
import SwiftCLI
import SwiftShell
import FileUtils

class Helpers {
    
    static func copy(fileAt src: String, toPath dst: String) -> Bool {
        
        if (FileManager.default.fileExists(atPath: dst)) {
            do {
                try FileManager.default.removeItem(atPath: dst)
            } catch {
                Logger.printError("An error occurred while trying to remove the file at \(dst)")
                return false
            }
        }
        do {
            try FileManager.default.copyItem(atPath: src, toPath: dst)
        } catch {
            Logger.printError("An error occurred while trying to copy the file at \(src) to \(dst)")
            return false
        }
        return true
    }
    
    /**
     Obtaining the version number tag from the .nuspec file.
     
     - Parameter nuspec: The nuspec file to read from the version number tag.
     
     - Returns: The version number tag for this package.
     */
    static func versionNumber(from nuspec: String) -> String {
        let versionRegex = "<version>[0-9]+.[0-9]+.[0-9]+</version>"
        guard let versionNumberTag = matches(for: versionRegex, in: nuspec) else {
            Logger.printFatalError("No version number tag found in nuspec file!")
            return ""
        }
        return versionNumberTag
    }
    
    /**
     Obtaining the version number from the version number tag.
     
     - Parameter versionTag: The version tag to read from the version number.
     
     - Returns: The version number for this package.
     */
    static func versionNumberString(from versionTag: String) -> String {
        let versionRegex = "[0-9]+.[0-9]+.[0-9]+"
        guard let versionNumber = matches(for: versionRegex, in: versionTag) else {
            Logger.printFatalError("No version number found in version number tag!")
            return ""
        }
        return versionNumber
    }
    
    /**
     Obtaining the release notes number tag from the .nuspec file.
     
     - Parameter nuspec: The nuspec file to read from the release notes.
     
     - Returns: The release notes string.
     */
    static func releaseNotes(from nuspec: String) -> String {
        let releaseNotesRegex = "<releaseNotes>[\\s\\S]+</releaseNotes>"
        guard let releaseNotesTag = matches(for: releaseNotesRegex, in: nuspec) else {
            Logger.printFatalError("No release notes tag found in nuspec file!")
            return ""
        }
        return releaseNotesTag
    }
    
    /**
     Matching a RegEx in a certain string, and returns its value.
     
     - Parameters:
         - regex: The regex to search for.
         - text: The text to search for the regex in.
     
     - Returns: The string in the text that matches the regex.
     */
    static func matches(for regex: String, in text: String) -> String? {
        
        do {
            let regex = try NSRegularExpression(pattern: regex)
            let results = regex.matches(in: text,
                                        range: NSRange(text.startIndex..., in: text))
            return results.map {
                String(text[Range($0.range, in: text)!])
                }.first
        } catch let error {
            print("invalid regex: \(error.localizedDescription)")
            return ""
        }
    }
    
    /**
     Obtaining the nuspec file contents.
     
     - Parameter nuspecPath: The nuspec path that has the nuspec file.
     
     - Returns: The nuspec file contents.
     */
    static func nuspecFileContents(from nuspecPath: String) -> String {
        do {
            let nuspecFileReadable = try open(nuspecPath)
            return nuspecFileReadable.read()
        } catch {
            Logger.printError("Error reading file")
            return ""
        }
    }
    
    static func openFileContents(fromPath filePath: String) -> String {
        do {
            let fileReadable = try open(filePath)
            return fileReadable.read()
        } catch {
            Logger.printError("Error reading file")
            return ""
        }
    }
    
    static func write(fileContents contents: String, toPath path: String) {
        do {
            let fileWritable = try open(forWriting: path, overwrite: true, encoding: main.encoding)
            fileWritable.write(contents)
            fileWritable.close()
        } catch {
            Logger.printError("Error writing to file in path \(path)")
        }
        
    }
    
    /**
     Gets the changelog form "CHANGELOG.md" file and returns them as entries in a String array
     
     - Returns: The string in the text that matches the regex.
     */
    static func getChangelog() -> [String] {
        var changeLog = [String]()
        do {
            let pathChangelog = "CHANGELOG.md"
            let dataChangelog = try NSString(contentsOfFile: pathChangelog,
                                             encoding: String.Encoding.ascii.rawValue)
            let lines = dataChangelog.components(separatedBy: .newlines)
            
            var capture = false
            for line in lines {
                if (line.hasPrefix("##")) {
                    if (capture) {
                        break
                    } else {
                        capture = true
                        continue
                    }
                }
                if (capture && !line.trimmingCharacters(in: .whitespaces).isEmpty) {
                    changeLog.append(line)
                }
            }
            return changeLog
        } catch {
            Logger.printError("Error reading Changelog: \(error)")
            exit(1)
        }
    }
    
    
    static func getVersion(versionFrom pathVersion: VersionFrom, omitPrefix: Bool) -> String {
        do {
            // Getting Version number
            let dataVersion = try NSString(contentsOfFile: pathVersion.rawValue,
                                           encoding: String.Encoding.ascii.rawValue)
            
            let matched = Helpers.matches(for: "(\")*version(\")*: ([\"\'])*([0-9]-*.*)+[0-9]([\"\'])*", in: dataVersion as String)
            let grepVersion = Helpers.matches(for: "([0-9]{1,}\\.)+[0-9]{1,}", in: matched! as String)
            let version = (omitPrefix ? "" : "v") + grepVersion!
            return version
        } catch {
            Logger.printError("Error reading Version number")
            exit(1)
        }
    }
    
    static func buildNativeLibrary(platform: String) {
        let repoPath = Constants.cacheDirectoryPathFor(platform: platform)
        
        if Path.exists("\(repoPath).git") {
            let cacheDirectoryPath = Constants.cacheDirectoryPath
            let repoPath = cacheDirectoryPath.appending(platform)
            
            Logger.print("Building repo at \(repoPath)")
            
            main.currentdirectory = repoPath
            Logger.printMessage("Current Directory: "+main.currentdirectory)
            
            do {
                try "".runAndPrint("./gradlew", "clean")
                let modules = XamarinConstants.AndroidModules
                for(module, _) in modules {
                    do {
                        try "".runAndPrint(bash: "./gradlew :\(module):assembleRelease")
                    } catch {
                        Logger.printFatalError("Failed to build \(module) module in Android.")
                    }
                }
            } catch {
                Logger.printFatalError("An error occurred while cleaning the Android project.")
            }
        } else {
            Logger.printError("\(platform) project does not exist. Try fetching the project first.")
        }
    }
    
}
