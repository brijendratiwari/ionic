//
//  PackageManager.swift
//  Escape
//
//  Created by Aly Ezz on 10/8/19.
//

import Foundation
import SwiftCLI
import SwiftShell
import FileUtils

class PackageManager {
    
    enum PackageManagerError: Error {
        case loginFailed(String)
        case publishFailed(String)
    }
    
    /**
     Publishes a package to NPM.
     */
    static func publishToNpm() throws {
        do {
            let token = ProcessInfo.processInfo.environment["NPM_TOKEN"]!
            
            // Login to npm
            try "".runAndPrint(bash: "npm set //registry.npmjs.org/:_authToken=\(token)")
            Logger.printSuccess("Logged in to npm with username instabug")
        } catch {
            Logger.printError("Failed to login to npm: \(error).")
            exit(1)
        }

        do {
            // Publish to npm
            try "".runAndPrint("npm", "publish", "./")
            Logger.printSuccess("Logged in to npm with username instabug")
        } catch {
            Logger.printError("Failed to publish to npm: \(error).")
            exit(1)
        }
    }
    
    
    /**
     Sets API Key for Nuget configuration.
     */
    static func setNuggetApiKey() throws {
        let xamarinApiKey = ProcessInfo.processInfo.environment["XAMARIN_API_KEY"]!
        let command = main.run(bash: "nuget setapikey \(xamarinApiKey)")
        if command.error != nil {
            Logger.printError(command.stderror)
            Logger.printFatalError("Failed to set API Key for publishing Nuget packages!")
            throw PackageManagerError.loginFailed("Failed to set nugget API key")
        } else {
            Logger.printSuccess("Successfully set API Key for publishing Nuget packages!")
        }
    }
    
    /**
     Publishes a package for a certain module.
     
     - Parameters:/Users/alyezz/Flutter/Instabug-Flutter/.circleci/config.yml
     - module: The module being published.
     - packageID: The id of the package being published.
     */
    static func publishToNugget(module: String, packageID: String) throws {
        
        // Navigate to the directory where the .nupkg file is located
        let moduleDirectory = main.currentdirectory.appending("\(module)/\(module)")
        main.currentdirectory = moduleDirectory
        do {
            let nuspecFileContents = Helpers.nuspecFileContents(from: moduleDirectory.appending("/\(module).nuspec"))
            
            let versionNumberTag = Helpers.versionNumber(from: nuspecFileContents)
            let versionNumber = Helpers.versionNumberString(from: versionNumberTag)
            try "".runAndPrint("nuget", "push", "\(packageID).\(versionNumber).nupkg", "-Source", "https://api.nuget.org/v3/index.json")
            Logger.printSuccess("Successfully published \(module) package!")
        } catch {
            Logger.printFatalError("Failed to publish \(module) package to Nuget!")
            throw PackageManagerError.publishFailed("Failed to publish nugget package: " + packageID)
        }
    }
    
    /**
     Publishes a package to Pub.
     */
    static func publishToPub() throws {
        // Set Pub credentials
        let ACCESS_TOKEN = ProcessInfo.processInfo.environment["ACCESS_TOKEN"]!
        let REFRESH_TOKEN = ProcessInfo.processInfo.environment["REFRESH_TOKEN"]!
        let EXPIRATION = ProcessInfo.processInfo.environment["EXPIRATION"]!
        let credentialsJson = """
                              {
                                   \"accessToken\":\"\(ACCESS_TOKEN)\",
                                   \"refreshToken\":\"\(REFRESH_TOKEN)\",
                                   \"tokenEndpoint\":\"https://accounts.google.com/o/oauth2/token\",
                                   \"scopes\":[\"https://www.googleapis.com/auth/userinfo.email\",\"openid\"],
                                   \"expiration\":\(EXPIRATION)
                              }
                              """
        main.run(bash: "mkdir -p $HOME/.pub-cache")
        let command = main.run(bash: "cat <<EOF > $HOME/.pub-cache/credentials.json \n \(credentialsJson) \n EOF")
        if command.error != nil {
            Logger.printError(command.stderror)
            throw PackageManagerError.loginFailed("Failed to set pub credentials")
        } else {
            Logger.printSuccess("Succesfully Set Pub credentials")
        }
        
        // Publish to pub
        try "".runAndPrint("flutter", "packages", "pub", "publish", "-f")
    }
}
