//
//  XamarinHelpers.swift
//  Escape
//
//  Created by Aly Ezz on 10/8/19.
//


import Foundation
import SwiftCLI
import SwiftShell
import FileUtils

class XamarinHelpers {

    static func bindNativeLibrary(platform: String) {
        if (platform == Constants.platforms.android) {
            bindAndroid()
        } else {
            bindIOS()
        }
    }
    
    private static func bindIOS() {
        let repoPath = Constants.cacheDirectoryPathFor(platform: Constants.platforms.iOS)
        if Path.exists("\(repoPath).git") {
            let iOSModule = XamarinConstants.iOSModule
            let copySuccess = Helpers.copy(fileAt: "\(repoPath)/Instabug.framework", toPath: "\(main.currentdirectory)\(iOSModule)/\(iOSModule)/IBGFrameworks/Instabug.framework")
            if (!copySuccess){
                exit(1)
            }
            Logger.printSuccess("Copied iOS framework successfuly.")
        } else {
            Logger.printError("\( XamarinConstants.iOSModule) project does not exist. Try fetching the project first.")
        }
        
    }
    
    private static func bindAndroid() {
        
        let repoPath = Constants.cacheDirectoryPathFor(platform: Constants.platforms.android)
        
        if Path.exists("\(repoPath).git") {
            let copyBinariesSuccess = copyBinaries(repoPath: repoPath)
            if (copyBinariesSuccess) {
                Logger.printSuccess("Copied all Android modules successfuly.")
            }
        } else {
            Logger.printError("Android project does not exist. Try fetching the project first.")
        }
    }
    
    private static func copyBinaries(repoPath: String) -> Bool {
        
        let modules = XamarinConstants.AndroidModules
        for (module, xamarinModule) in modules {
            let aarPath = "\(repoPath)\(module)/build/outputs/aar"
            if (Path.exists(aarPath)) {
                let aarName = "\(module)-release.aar"
                let copySuccess = Helpers.copy(fileAt: "\(aarPath)/\(aarName)", toPath: "\(main.currentdirectory)\(xamarinModule)/\(xamarinModule)/Jars/\(aarName)")
                if (!copySuccess){
                    exit(1)
                }
            } else {
                Logger.printError("Library aar path for the module \(module) does not exist in path \(aarPath). Try building the project first.")
                return false
            }
        }
        return true
        
    }
    
    
    static func editNuspecFile(module: String, newVersion: String, releaseNotes: String) {
        do {
            // Reading contents of nuspec file
            var nuspecFileContents = Helpers.nuspecFileContents(from: main.currentdirectory.appending("\(module).nuspec"))
            
            // Writable for .nuspec file for editing.
            let nuspecFileWritable = try open(forWriting: main.currentdirectory.appending("\(module).nuspec"), overwrite: true, encoding: main.encoding)
            
            // Acquiring the version and release notes from the previous version
            let version = Helpers.versionNumber(from: nuspecFileContents)
            let releaseNotesTag = Helpers.releaseNotes(from: nuspecFileContents)
            
            // Update the version and release notes
            nuspecFileContents = nuspecFileContents.replacingOccurrences(of: "\(version)", with: "<version>\(newVersion)</version>")
            nuspecFileContents = nuspecFileContents.replacingOccurrences(of: "\(releaseNotesTag)", with: "<releaseNotes>\(releaseNotes)</releaseNotes>")
            
            // Write the new .nuspec file
            nuspecFileWritable.write(nuspecFileContents)
            nuspecFileWritable.close()
        } catch {
            Logger.printError("Error writing to file")
        }
    }
    
    static func installNugetPackages(for module: String, project projectDir: String) {
        main.currentdirectory = projectDir
        do {
            try "".runAndPrint(bash: "nuget install " + module + "/" + module + "/packages.config -OutputDirectory " + module + "/Packages")
        } catch {
            Logger.printError("Error with nuget install: \(error).")
            exit(1)
        }
    }
    
    static func pack(for module: String, project projectDir: String) {
        // Install nuget dependencies
        installNugetPackages(for: module, project: projectDir)
        do {
            // Navigate to the directory where the .nuspec file is located
            main.currentdirectory = projectDir.appending("\(module)/\(module)")
            // Run nuget pack command
            try "".runAndPrint("nuget", "pack", "-IncludeReferencedProjects", "-Build", "-Properties", "Configuration=Release")
            //Return to project directory after packing
            main.currentdirectory = projectDir
        } catch {
            Logger.printFatalError("Failed to pack \(module)")
            exit(1)
        }
    }
}
