(function () {
  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  (self["webpackChunkpetcloud"] = self["webpackChunkpetcloud"] || []).push([["src_app_post-job_post-job_module_ts"], {
    /***/
    66408:
    /*!*********************************************!*\
      !*** ./src/app/post-job/post-job.module.ts ***!
      \*********************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "PostJobPageModule": function PostJobPageModule() {
          return (
            /* binding */
            _PostJobPageModule
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! tslib */
      64762);
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @angular/core */
      37716);
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @angular/common */
      38583);
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! @angular/forms */
      3679);
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! @angular/router */
      39895);
      /* harmony import */


      var _ionic_angular__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! @ionic/angular */
      80476);
      /* harmony import */


      var _post_job_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./post-job.page */
      14104);
      /* harmony import */


      var _ionic_native_date_picker_ngx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @ionic-native/date-picker/ngx */
      61194);
      /* harmony import */


      var ion2_calendar__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ion2-calendar */
      18834);
      /* harmony import */


      var ion2_calendar__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(ion2_calendar__WEBPACK_IMPORTED_MODULE_2__);
      /* harmony import */


      var ngx_google_places_autocomplete__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ngx-google-places-autocomplete */
      44836);
      /* harmony import */


      var ngx_google_places_autocomplete__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(ngx_google_places_autocomplete__WEBPACK_IMPORTED_MODULE_3__);
      /* harmony import */


      var _pet_taxi_agreement_model_pet_taxi_agreement_model_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ../pet-taxi-agreement-model/pet-taxi-agreement-model.component */
      12101);

      var routes = [{
        path: '',
        component: _post_job_page__WEBPACK_IMPORTED_MODULE_0__.PostJobPage
      }];

      var _PostJobPageModule = /*#__PURE__*/_createClass(function PostJobPageModule() {
        _classCallCheck(this, PostJobPageModule);
      });

      _PostJobPageModule = (0, tslib__WEBPACK_IMPORTED_MODULE_5__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_6__.NgModule)({
        entryComponents: [_pet_taxi_agreement_model_pet_taxi_agreement_model_component__WEBPACK_IMPORTED_MODULE_4__.PetTaxiAgreementModelComponent],
        imports: [_angular_common__WEBPACK_IMPORTED_MODULE_7__.CommonModule, _angular_forms__WEBPACK_IMPORTED_MODULE_8__.FormsModule, _angular_forms__WEBPACK_IMPORTED_MODULE_8__.ReactiveFormsModule, _ionic_angular__WEBPACK_IMPORTED_MODULE_9__.IonicModule, ion2_calendar__WEBPACK_IMPORTED_MODULE_2__.CalendarModule, ngx_google_places_autocomplete__WEBPACK_IMPORTED_MODULE_3__.GooglePlaceModule, _angular_router__WEBPACK_IMPORTED_MODULE_10__.RouterModule.forChild(routes)],
        declarations: [_post_job_page__WEBPACK_IMPORTED_MODULE_0__.PostJobPage, _pet_taxi_agreement_model_pet_taxi_agreement_model_component__WEBPACK_IMPORTED_MODULE_4__.PetTaxiAgreementModelComponent],
        providers: [_ionic_native_date_picker_ngx__WEBPACK_IMPORTED_MODULE_1__.DatePicker]
      })], _PostJobPageModule);
      /***/
    },

    /***/
    14104:
    /*!*******************************************!*\
      !*** ./src/app/post-job/post-job.page.ts ***!
      \*******************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "PostJobPage": function PostJobPage() {
          return (
            /* binding */
            _PostJobPage
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! tslib */
      64762);
      /* harmony import */


      var _raw_loader_post_job_page_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! !raw-loader!./post-job.page.html */
      12032);
      /* harmony import */


      var _post_job_page_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./post-job.page.scss */
      67087);
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(
      /*! @angular/core */
      37716);
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! @angular/forms */
      3679);
      /* harmony import */


      var _api_petcloud_api_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../api/petcloud-api.service */
      78975);
      /* harmony import */


      var _ionic_storage__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
      /*! @ionic/storage */
      38605);
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! @angular/common */
      38583);
      /* harmony import */


      var _ionic_angular__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
      /*! @ionic/angular */
      80476);
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
      /*! @angular/router */
      39895);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! rxjs/operators */
      68939);
      /* harmony import */


      var moment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! moment */
      16738);
      /* harmony import */


      var moment__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_3__);
      /* harmony import */


      var _ionic_native_date_picker_ngx__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @ionic-native/date-picker/ngx */
      61194);
      /* harmony import */


      var _analytics_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ../analytics.service */
      4625);
      /* harmony import */


      var _apps_flyer_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! ../apps-flyer.service */
      79103);
      /* harmony import */


      var _pet_taxi_agreement_model_pet_taxi_agreement_model_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! ../pet-taxi-agreement-model/pet-taxi-agreement-model.component */
      12101);

      var _PostJobPage = /*#__PURE__*/function () {
        function PostJobPage(formBuilder, api, storage, location, model, navCtrl, platform, router, datePicker, route, analytics, appsFlyerAnalytics) {
          var _ref;

          _classCallCheck(this, PostJobPage);

          this.formBuilder = formBuilder;
          this.api = api;
          this.storage = storage;
          this.location = location;
          this.model = model;
          this.navCtrl = navCtrl;
          this.platform = platform;
          this.router = router;
          this.datePicker = datePicker;
          this.route = route;
          this.analytics = analytics;
          this.appsFlyerAnalytics = appsFlyerAnalytics;
          this.serviceList = [];
          this.petList = [];
          this.selectedPet = [];
          this.isFormValid = false;
          this.ServiceChargeType = "";
          this.hideServices = false; //Boolean Show Hide Variables

          this.isRecurring = false;
          this.isOnceOff = false; // Show or hide Once off

          this.hideBothDaySelector = false;
          this.isCustomDays = false;
          this.isEndDateTime = true;
          this.isMultipleDays = false;
          this.isNoPets = false;
          this.isPetTaxi = false;
          this.isOneOffDateSelector = false;
          this.isRecurringDateSelector = false; // Setting Min Date and Min Max Time

          this.startMinDate = ""; //Estimated Cost..

          this.totalEstimatedCost = 1;
          this.weeklyEstimatedCost = 1;
          this.differenceDays = 2;
          this.isMessagesContainerSectionLoaded = false;
          this.isEmailVerified = false;
          this.isPhVerifed = false;
          this.paymentVeried = false;
          this.diffDays = 0;
          this.hideFabButton = false;
          this.hideCosts = true;
          this.daysBetweenCustomDateSelected = [];
          this.calucations = (_ref = [{
            petId: ""
          }, {
            diffDay: ""
          }, {
            priceOfPet: ""
          }], _ref);
          this.selectedPetIds = [];
          this.selectedpetType = [];
          this.petDetails = [{
            id: "",
            petType: ""
          }];
          this.isrecurringSelected = false;
          this.isPetAvailable = false;
          this.isModelClick = false; //Validations

          this.isbookingType = false;
          this.isPetSelected = true;
          this.is_service_type_id = false;
          this.is_recurringType = false;
          this.is_booking_days = false;
          this.isCustomSelectorValidated = false;
          this.isPhEmailVerified = false;
          this.recurringOption = "";
          this.CUSTOM = "C";
          this.EVERYDAY = "ED";
          this.WEEKEND = "W";
          this.ONCE_A_WEEK = "OAW";
          this.EVERY_2nd_DAY = "E2D";
          this.EVERY_WEEK_DAY = "EWD";
          this.EVERY_2nd_DAY_WEEK = "E2WD";
          this.userId = "";
          this.isCreateButtonShown = true;
          this.directionsService = new google.maps.DirectionsService();
          this.directionsDisplay = new google.maps.DirectionsRenderer();
          this.googleMapShown = false;
          this.options = {
            // types: ['(regions)'],
            componentRestrictions: {
              country: "AU"
            },
            bounds: null,
            types: [],
            fields: null,
            strictBounds: null,
            origin: null
          };

          this.compareWithFn = function (o1, o2) {
            return o1 && o2 ? o1.id === o2.id : o1 === o2;
          };

          this.isNaN = Number.isNaN; //Store URL to check in pet Add Page.

          this.storage.set("pervURL", this.router.url);

          if (this.router.url == "post-job") {
            this.hideFabButton = false;
          } else {
            this.hideFabButton = true;
          }

          this.backButtonEvent();
        }

        _createClass(PostJobPage, [{
          key: "ngOnInit",
          value: function ngOnInit() {
            //1)bookingType:- 0 for one-off and 1 for recurring.
            //  2)booking_days[]:- (0 for SUN, 1 for MON, 2 for TUE, 3 for WED, 4 for THR, 5 for FRI, 6 for SAT)
            this.jobPostingForm = this.formBuilder.group({
              service_type_id: ["", [_angular_forms__WEBPACK_IMPORTED_MODULE_8__.Validators.required]],
              pets: [[], [_angular_forms__WEBPACK_IMPORTED_MODULE_8__.Validators.required]],
              start_date: [""],
              end_date: [""],
              description: [""],
              start_time: [""],
              end_time: [""],
              bookingType: [],
              booking_days: ["", [_angular_forms__WEBPACK_IMPORTED_MODULE_8__.Validators.required]],
              recurring_type: [""],
              pickup_address: [""],
              destination_address: [""],
              km_distance: [""],
              min_distance: [""],
              taxi_way: [""],
              petTaxiCleaninessAgree: true,
              pickup_suburb: "",
              destination_suburb: ""
            });
          }
        }, {
          key: "ionViewWillEnter",
          value: function ionViewWillEnter() {
            return (0, tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
              var _this = this;

              return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      this.jobPostingForm.patchValue({
                        start_date: this.startMinDate,
                        end_date: this.minToDate
                      });
                      this.totalEstimatedCost = 1;
                      this.weeklyEstimatedCost = 1;
                      this.startMinTime = "05:00";
                      this.startTotime = "16:00";
                      this.storage.get(_api_petcloud_api_service__WEBPACK_IMPORTED_MODULE_2__.PetcloudApiService.USER).then(function (res) {
                        return (0, tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
                          var today, tomorrow;
                          return _regeneratorRuntime().wrap(function _callee$(_context) {
                            while (1) {
                              switch (_context.prev = _context.next) {
                                case 0:
                                  if (!(res != null)) {
                                    _context.next = 16;
                                    break;
                                  }

                                  _context.next = 3;
                                  return this.getPetsListing();

                                case 3:
                                  _context.next = 5;
                                  return this.api.isVerificationPendingModel();

                                case 5:
                                  // get tomorrow date.
                                  today = new Date();
                                  tomorrow = new Date(today.setDate(today.getDate() + 1)).toISOString();
                                  this.startMinDate = tomorrow;
                                  this.minEdDate = tomorrow;
                                  this.minToDate = new Date(today.setDate(today.getDate() + 2)).toISOString();
                                  this.frmDate = tomorrow;
                                  this.toDate = new Date(today.setDate(today.getDate())).toISOString();
                                  this.lbl_formatedStartDate = this.startMinDate;
                                  this.lbl_formatedEndDate = this.minToDate;
                                  _context.next = 16;
                                  break;

                                case 16:
                                case "end":
                                  return _context.stop();
                              }
                            }
                          }, _callee, this);
                        }));
                      });

                    case 6:
                    case "end":
                      return _context2.stop();
                  }
                }
              }, _callee2, this);
            }));
          }
        }, {
          key: "ionViewDidLeave",
          value: function ionViewDidLeave() {
            this.isCustomDays = false;
          }
        }, {
          key: "clearData",
          value: function clearData() {
            this.isbookingType = false;
            this.isPetSelected = false;
            this.is_service_type_id = false;
            this.is_recurringType = false;
            this.is_booking_days = false;
            this.isCustomDays = false;
            this.isCustomSelectorValidated = false;
            this.jobPostingForm.value.booking_days = "";
            this.jobPostingForm.value.recurring_type = "";
            this.jobPostingForm.value.bookingType = "";
            this.jobPostingForm.value.recurring_type = "";
            this.jobPostingForm.value.pets = [];
            this.jobPostingForm.get("booking_days").clearValidators();
            this.jobPostingForm.get("booking_days").updateValueAndValidity();
            this.isRecurringDateSelector = false;
            this.weeklyEstimatedCost = 1;
            this.totalEstimatedCost = 1;
          } //Set End Date and Clearing Form Values of To Date

        }, {
          key: "fromDate",
          value: function fromDate(event) {
            this.lbl_formatedStartDate = event;
            this.jobPostingForm.patchValue({
              start_date: event,
              end_date: ""
            });
            this.frmDate = event;
            this.minToDate > this.frmDate ? (this.minToDate = this.minToDate, this.minEdDate = event) : (this.minToDate = event, this.minEdDate = this.minToDate);
            this.selectedPetIds.length ? this.isPetSelected = false : this.isPetSelected = true;
            this.jobPostingForm.patchValue({
              end_date: this.minToDate
            });
            this.isWeekend(this.frmDate, this.toDate);
          }
        }, {
          key: "fromTimeChange",
          value: function fromTimeChange(time) {
            this.clearPetTaxiValue();
          }
        }, {
          key: "endDateChange",
          value: function endDateChange(event) {
            this.lbl_formatedEndDate = event;
            this.jobPostingForm.patchValue({
              end_date: event
            });
            this.toDate = event;
            this.minEdDate > this.frmDate ? this.minToDate = this.minToDate : (this.minToDate = event, this.minEdDate = this.minToDate);
            this.selectedPetIds.length ? this.isNoPets = false : this.isNoPets = true;
            this.isWeekend(this.frmDate, this.toDate);
            this.dateDifference();
          }
        }, {
          key: "dateDifference",
          value: function dateDifference() {
            var date1 = new Date(this.frmDate);
            var date2 = new Date(this.toDate);
            var timeDiff = Math.abs(date2.getTime() - date1.getTime());
            this.diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));
            this.pricesOfSelectedPet();
          }
        }, {
          key: "pricesOfSelectedPet",
          value: function pricesOfSelectedPet() {
            var _this2 = this;

            var price = [];
            var detailOfPets = [];

            if (this.selectedServiceId != "") {
              var _loop = function _loop(i) {
                if (_this2.priceValues) {
                  price.push(_this2.priceValues.filter(function (res) {
                    return res.id == _this2.selectedpetType[i];
                  }));
                  detailOfPets.push(_this2.priceValues.filter(function (res) {
                    return res.id == _this2.selectedpetType[i];
                  }));
                }
              };

              //Compare Both Pet Id and Take Price Array..
              for (var i = 0; i < this.selectedpetType.length; i++) {
                _loop(i);
              }

              this.jobPostingForm.value.pets.length == 0 ? this.isPetSelected = true : this.isPetSelected = false;
              this.calculatePrice(detailOfPets);
            }
          }
        }, {
          key: "calculatePrice",
          value: function calculatePrice(detailOfPets) {
            if (this.diffDays == 0) {
              this.differenceDays = 1;
            } else {
              this.differenceDays = this.diffDays;
            }

            this.calculateWeeklyandTotalPrice(detailOfPets);
          }
        }, {
          key: "getDates",
          value: function getDates(startDate, stopDate) {
            var dateArray = [];
            var fromDate;
            var endDt;
            fromDate = moment__WEBPACK_IMPORTED_MODULE_3__(startDate).format("YYYY-MM-DD");
            endDt = moment__WEBPACK_IMPORTED_MODULE_3__(stopDate).format("YYYY-MM-DD");
            var dateArray = [];
            var currentDate = moment__WEBPACK_IMPORTED_MODULE_3__(startDate);
            var stopDt = moment__WEBPACK_IMPORTED_MODULE_3__(stopDate);

            while (currentDate <= stopDt) {
              dateArray.push(moment__WEBPACK_IMPORTED_MODULE_3__(currentDate).format("YYYY-MM-DD"));
              currentDate = moment__WEBPACK_IMPORTED_MODULE_3__(currentDate).add(1, "days");
            }

            return dateArray;
          }
        }, {
          key: "isFooterShown",
          value: function isFooterShown() {
            this.isCreateButtonShown = false;

            if (this.pickupLocation != "" && this.destinationLocation != "") {
              this.isCreateButtonShown = true;
            }
          }
        }, {
          key: "isWeekend",
          value: function isWeekend(start_date, end_date) {
            var _this3 = this;

            {
              var dates = [];
              var weekendDays = 0;
              var every2ndDay = 0;
              var m2f = 0; // Monday to friday.

              var customDay = 0;
              var oaw = 0;
              var mwf = 0;
              var everyday = 0;
              this.daysBetweenCustomDateSelected = [];
              this.customDayCount = 0;
              dates = this.getDates(start_date, end_date); // every day Sunday to Saturday.

              if (this.ServiceChargeType != "0") {
                if (this.jobPostingForm.value.recurring_type == this.EVERYDAY) {
                  everyday = dates.length;
                  this.isDaysCount = everyday;
                }

                dates.forEach(function (element) {
                  return (0, tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
                    var booking_days;
                    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
                      while (1) {
                        switch (_context3.prev = _context3.next) {
                          case 0:
                            this.daysBetweenCustomDateSelected.push(new Date(element).getDay()); // Get Day from Date in Array.
                            // Saturday and sunday

                            if (!(this.jobPostingForm.value.recurring_type == this.WEEKEND)) {
                              _context3.next = 5;
                              break;
                            }

                            if (new Date(element).getDay() == 6 || new Date(element).getDay() == 0) {
                              weekendDays = weekendDays + 1;
                              this.isDaysCount = weekendDays;
                            }

                            _context3.next = 31;
                            break;

                          case 5:
                            if (!(this.jobPostingForm.value.recurring_type == this.EVERY_2nd_DAY)) {
                              _context3.next = 9;
                              break;
                            }

                            if (new Date(element).getDay() == 1 || new Date(element).getDay() == 3 || new Date(element).getDay() == 5) {
                              every2ndDay = every2ndDay + 1;
                              this.isDaysCount = every2ndDay;
                            }

                            _context3.next = 31;
                            break;

                          case 9:
                            if (!(this.jobPostingForm.value.recurring_type == this.EVERY_WEEK_DAY)) {
                              _context3.next = 13;
                              break;
                            }

                            if (new Date(element).getDay() == 1 || new Date(element).getDay() == 2 || new Date(element).getDay() == 3 || new Date(element).getDay() == 4 || new Date(element).getDay() == 5) {
                              m2f = m2f + 1;
                              this.isDaysCount = m2f;
                            }

                            _context3.next = 31;
                            break;

                          case 13:
                            if (!(this.jobPostingForm.value.recurring_type == this.ONCE_A_WEEK)) {
                              _context3.next = 17;
                              break;
                            }

                            if (new Date(element).getDay() == this.jobPostingForm.value.booking_days) {
                              oaw = oaw + 1;
                              this.isDaysCount = oaw;
                            }

                            _context3.next = 31;
                            break;

                          case 17:
                            if (!(this.jobPostingForm.value.recurring_type == this.EVERY_2nd_DAY_WEEK)) {
                              _context3.next = 21;
                              break;
                            }

                            if (new Date(element).getDay() == 1 || new Date(element).getDay() == 3 || new Date(element).getDay() == 5) {
                              mwf = mwf + 1;
                              this.isDaysCount = mwf;
                            }

                            _context3.next = 31;
                            break;

                          case 21:
                            if (!(this.jobPostingForm.value.recurring_type == this.CUSTOM)) {
                              _context3.next = 31;
                              break;
                            }

                            if (!this.jobPostingForm.value.booking_days.length) {
                              _context3.next = 31;
                              break;
                            }

                            _context3.next = 25;
                            return this.jobPostingForm.value.booking_days.map(Number);

                          case 25:
                            booking_days = _context3.sent;
                            _context3.next = 28;
                            return this.daysBetweenCustomDateSelected.filter(function (dayEle) {
                              return booking_days.includes(dayEle);
                            }).length;

                          case 28:
                            this.customDayCount = _context3.sent;
                            _context3.next = 31;
                            break;

                          case 31:
                          case "end":
                            return _context3.stop();
                        }
                      }
                    }, _callee3, this);
                  }));
                });
              }
            }
          } //Calculating Total and Weekly Estimated Cost..

        }, {
          key: "calculateWeeklyandTotalPrice",
          value: function calculateWeeklyandTotalPrice(detailOfPets) {
            return (0, tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
              var _this4 = this;

              var payablePrice, weeklyPay, diffDay, i, maxPrice, minPrice, _i, _maxPrice, _minPrice;

              return _regeneratorRuntime().wrap(function _callee5$(_context5) {
                while (1) {
                  switch (_context5.prev = _context5.next) {
                    case 0:
                      payablePrice = [];
                      weeklyPay = [];
                      this.recurringOption = this.jobPostingForm.value.recurring_type;

                      if (!(this.ServiceChargeType != 0)) {
                        _context5.next = 60;
                        break;
                      }

                      diffDay = 1;
                      diffDay = this.diffDays + 1;
                      i = 0;

                    case 7:
                      if (!(i < detailOfPets.length)) {
                        _context5.next = 52;
                        break;
                      }

                      if (!(detailOfPets[i][0].price != NaN || detailOfPets[i][0].price == 0)) {
                        _context5.next = 48;
                        break;
                      }

                      if (!(this.selectedService.perPet == 1)) {
                        _context5.next = 45;
                        break;
                      }

                      if (!(this.jobPostingForm.value.recurring_type == this.EVERYDAY)) {
                        _context5.next = 14;
                        break;
                      }

                      if (this.isEndDateTime == true) {
                        if (this.diffDays >= 7) {
                          payablePrice.push(this.differenceDays * detailOfPets[i][0].price);
                          weeklyPay.push(7 * detailOfPets[i][0].price);
                        } else {
                          payablePrice.push(diffDay * detailOfPets[i][0].price);
                          weeklyPay.push(diffDay * detailOfPets[i][0].price);
                        }
                      } else {
                        payablePrice.push(1 * detailOfPets[i][0].price);
                      }

                      _context5.next = 43;
                      break;

                    case 14:
                      if (!(this.jobPostingForm.value.recurring_type == this.EVERY_2nd_DAY)) {
                        _context5.next = 19;
                        break;
                      }

                      payablePrice.push(this.isDaysCount * detailOfPets[i][0].price);

                      if (this.diffDays >= 3) {
                        weeklyPay.push(3 * detailOfPets[i][0].price);
                      } else {
                        weeklyPay.push(1 * detailOfPets[i][0].price);
                      }

                      _context5.next = 43;
                      break;

                    case 19:
                      if (!(this.jobPostingForm.value.recurring_type == this.EVERY_WEEK_DAY)) {
                        _context5.next = 24;
                        break;
                      }

                      payablePrice.push(this.isDaysCount * detailOfPets[i][0].price);

                      if (this.diffDays >= 5) {
                        weeklyPay.push(5 * detailOfPets[i][0].price);
                      } else {
                        weeklyPay.push(this.diffDays * detailOfPets[i][0].price);
                      }

                      _context5.next = 43;
                      break;

                    case 24:
                      if (!(this.jobPostingForm.value.recurring_type == this.EVERY_2nd_DAY_WEEK)) {
                        _context5.next = 29;
                        break;
                      }

                      payablePrice.push(this.isDaysCount * detailOfPets[i][0].price);

                      if (this.diffDays >= 3) {
                        weeklyPay.push(3 * detailOfPets[i][0].price);
                      } else {
                        weeklyPay.push(1 * detailOfPets[i][0].price);
                      }

                      _context5.next = 43;
                      break;

                    case 29:
                      if (!(this.jobPostingForm.value.recurring_type == this.ONCE_A_WEEK)) {
                        _context5.next = 34;
                        break;
                      }

                      payablePrice.push(this.isDaysCount * detailOfPets[i][0].price);
                      weeklyPay.push(1 * detailOfPets[i][0].price);
                      _context5.next = 43;
                      break;

                    case 34:
                      if (!(this.jobPostingForm.value.recurring_type == this.WEEKEND)) {
                        _context5.next = 39;
                        break;
                      }

                      payablePrice.push(this.isDaysCount * detailOfPets[i][0].price);

                      if (this.diffDays >= 3) {
                        weeklyPay.push(2 * detailOfPets[i][0].price);
                      } else {
                        weeklyPay.push(1 * detailOfPets[i][0].price);
                      }

                      _context5.next = 43;
                      break;

                    case 39:
                      if (!(this.jobPostingForm.value.recurring_type == this.CUSTOM)) {
                        _context5.next = 43;
                        break;
                      }

                      if (!this.jobPostingForm.value.booking_days.length) {
                        _context5.next = 42;
                        break;
                      }

                      return _context5.delegateYield( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
                        var booking_days;
                        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
                          while (1) {
                            switch (_context4.prev = _context4.next) {
                              case 0:
                                _context4.next = 2;
                                return _this4.jobPostingForm.value.booking_days.map(Number);

                              case 2:
                                booking_days = _context4.sent;
                                _context4.next = 5;
                                return _this4.daysBetweenCustomDateSelected.filter(function (dayEle) {
                                  return booking_days.includes(dayEle);
                                }).length;

                              case 5:
                                _this4.customDayCount = _context4.sent;

                              case 6:
                              case "end":
                                return _context4.stop();
                            }
                          }
                        }, _callee4);
                      })(), "t0", 42);

                    case 42:
                      if (this.isEndDateTime == true) {
                        payablePrice = [];
                        weeklyPay = [];

                        if (this.customDayCount == 0) {
                          payablePrice.push(detailOfPets[i][0].price);
                          weeklyPay.push(detailOfPets[i][0].price);
                        } else {
                          payablePrice.push(this.customDayCount * detailOfPets[i][0].price);
                          weeklyPay.push(this.customDayCount * detailOfPets[i][0].price);
                        }
                      } else {
                        payablePrice.push(1 * detailOfPets[i][0].price);
                        weeklyPay.push(1 * detailOfPets[i][0].price);
                      }

                    case 43:
                      _context5.next = 46;
                      break;

                    case 45:
                      if (this.selectedService.perPet == 0) {
                        if (this.jobPostingForm.value.recurring_type == this.EVERYDAY) {
                          if (this.isEndDateTime == true) {
                            payablePrice.push(this.differenceDays * this.selectedService.price);
                            weeklyPay.push(7 * detailOfPets[i][0].price);
                          } else {
                            payablePrice.push(7 * this.selectedService.price);
                            weeklyPay.push(7 * detailOfPets[i][0].price);
                          }
                        } else if (this.jobPostingForm.value.recurring_type == this.EVERY_2nd_DAY) {
                          if (this.diffDays >= 3) {
                            payablePrice.push(this.isDaysCount * this.selectedService.price);
                            weeklyPay.push(3 * detailOfPets[i][0].price);
                          } else {
                            payablePrice.push(this.isDaysCount * this.selectedService.price);
                            weeklyPay.push(3 * detailOfPets[i][0].price);
                          }
                        } else if (this.jobPostingForm.value.recurring_type == this.EVERY_WEEK_DAY) {
                          payablePrice.push(this.isDaysCount * this.selectedService.price);
                          weeklyPay.push(5 * detailOfPets[i][0].price);
                        } else if (this.jobPostingForm.value.recurring_type == this.EVERY_2nd_DAY_WEEK) {
                          payablePrice.push(this.isDaysCount * this.selectedService.price);

                          if (this.diffDays >= 3) {
                            weeklyPay.push(3 * detailOfPets[i][0].price);
                          } else {
                            weeklyPay.push(this.diffDays * detailOfPets[i][0].price);
                          }
                        } else if (this.jobPostingForm.value.recurring_type == this.ONCE_A_WEEK) {
                          payablePrice.push(this.isDaysCount * this.selectedService.price);
                          weeklyPay.push(1 * detailOfPets[i][0].price);
                        } else if (this.jobPostingForm.value.recurring_type == this.WEEKEND) {
                          if (this.diffDays >= 7) {
                            payablePrice.push(this.isDaysCount * this.selectedService.price);
                          } else {
                            payablePrice.push(2 * this.selectedService.price);

                            if (this.diffDays >= 3) {
                              weeklyPay.push(2 * detailOfPets[i][0].price);
                            } else {
                              weeklyPay.push(3 * detailOfPets[i][0].price);
                            }
                          }
                        } else if (this.jobPostingForm.value.recurring_type == this.CUSTOM) {
                          if (this.customSelectedDays > 0) {
                            payablePrice.push(this.customDayCount * detailOfPets[i][0].price);
                            weeklyPay.push(this.customDayCount * detailOfPets[i][0].price);
                          }
                        }
                      }

                    case 46:
                      _context5.next = 49;
                      break;

                    case 48:
                      this.hideCosts = false;

                    case 49:
                      i++;
                      _context5.next = 7;
                      break;

                    case 52:
                      this.totalEstimatedCost = payablePrice.reduce(function (a, b) {
                        return a + b;
                      }, 0);
                      this.weeklyEstimatedCost = weeklyPay.reduce(function (a, b) {
                        return a + b;
                      }, 0);
                      maxPrice = this.recurringOptions.bookingFee.maxPrice;
                      minPrice = this.recurringOptions.bookingFee.minPrice;

                      if (this.weeklyEstimatedCost >= 400) {
                        this.weeklyEstimatedCost = parseFloat(this.weeklyEstimatedCost.toString()) + parseFloat(maxPrice);
                      } else {
                        this.weeklyEstimatedCost = this.weeklyEstimatedCost * minPrice + parseFloat(this.weeklyEstimatedCost.toString());
                      }

                      if (this.totalEstimatedCost >= 400) {
                        this.totalEstimatedCost = parseFloat(this.totalEstimatedCost.toString()) + parseFloat(maxPrice);
                      } else {
                        this.totalEstimatedCost = this.totalEstimatedCost * minPrice + parseFloat(this.totalEstimatedCost.toString());
                      }

                      _context5.next = 61;
                      break;

                    case 60:
                      if (this.ServiceChargeType == 0) {
                        for (_i = 0; _i < detailOfPets.length; _i++) {
                          if (detailOfPets[_i][0].price != NaN || detailOfPets[_i][0].price != 0) {
                            if (this.selectedService.perPet == 1) {
                              payablePrice.push(this.differenceDays * detailOfPets[_i][0].price);
                            } else if (this.selectedService.perPet == 0) {
                              payablePrice.push(this.differenceDays * this.selectedService.price);
                            }

                            this.totalEstimatedCost = payablePrice.reduce(function (a, b) {
                              return a + b;
                            }, 0);
                          }
                        }

                        if (this.recurringOptions) {
                          _maxPrice = this.recurringOptions.bookingFee.maxPrice;
                          _minPrice = this.recurringOptions.bookingFee.minPrice;

                          if (this.weeklyEstimatedCost >= 400) {
                            this.weeklyEstimatedCost = parseFloat(this.weeklyEstimatedCost.toString()) + parseFloat(_maxPrice);
                          } else {
                            this.weeklyEstimatedCost = this.weeklyEstimatedCost * _minPrice + parseFloat(this.weeklyEstimatedCost.toString());
                          }

                          if (this.totalEstimatedCost >= 400) {
                            this.totalEstimatedCost = parseFloat(this.totalEstimatedCost.toString()) + parseFloat(_maxPrice);
                          } else {
                            this.totalEstimatedCost = this.totalEstimatedCost * _minPrice + parseFloat(this.totalEstimatedCost.toString());
                          }
                        } else {
                          this.isFormValid = false;
                          this.jobPostingForm.patchValue({
                            service_type_id: ""
                          });
                        }
                      }

                    case 61:
                    case "end":
                      return _context5.stop();
                  }
                }
              }, _callee5, this);
            }));
          }
        }, {
          key: "onPetSelectChange",
          value: function onPetSelectChange(event, petDetail) {
            //Selected Pets.
            this.jobPostingForm.value.pets;
            var index = this.selectedPetIds.indexOf(petDetail.id);

            if (event.detail.checked) {
              if (index === -1) {
                this.selectedPetIds.push(petDetail.id);
                this.selectedpetType.push(petDetail.petType);
                this.jobPostingForm.value.pets.push(petDetail.id);
              } else {
                this.selectedPetIds.splice(index, 1);
                this.selectedpetType.splice(index, 1);
                this.jobPostingForm.value.pets.splice(index, 1);
              }

              if (this.jobPostingForm.value.pets.length == 0) {
                this.isPetSelected = true;
              }

              if (this.jobPostingForm.value.pets.length > 0) {
                this.isPetSelected = false;
                this.pricesOfSelectedPet();
              }
            } else {
              this.selectedPetIds.splice(index, 1);
              this.selectedpetType.splice(index, 1);
              this.jobPostingForm.value.pets.splice(index, 1);
              this.pricesOfSelectedPet();
            }

            if (this.selectedPetIds.length) {
              this.isPetSelected = false;
            } else {
              this.isPetSelected = true;
            }

            if (this.jobPostingForm.value.service_type_id == "") {
              this.isFormValid = false;
            } else if (this.selectedMode == undefined) {
              this.isFormValid = false;
            } else if (this.selectedPetIds.length == 0) {
              this.isFormValid = false;
            } else if (this.selectedMode != undefined && this.selectedPetIds.length) {
              if (this.ServiceChargeType == 0) {
                this.isFormValid = true;
              } else if (this.ServiceChargeType != 0) {
                if (this.jobPostingForm.value.recurring_type != this.CUSTOM || this.jobPostingForm.value.recurring_type != this.ONCE_A_WEEK) {
                  if (this.jobPostingForm.value.recurring_type != "") {
                    this.isFormValid = true;
                  } else {
                    this.isFormValid = false;
                  }
                } else if (this.jobPostingForm.value.recurring == this.CUSTOM || this.jobPostingForm.value.recurring_type == this.ONCE_A_WEEK) {
                  if (this.jobPostingForm.value.booking_days != "") {
                    this.isFormValid = true;
                  } else {
                    this.isFormValid = false;
                  }
                }
              }
            } else {
              this.isFormValid = false;
            }
          }
        }, {
          key: "setHideOnce",
          value: function setHideOnce(hideOnce) {
            if (hideOnce) {
              this.isEndDateTime = false;
              this.lbl_formatedEndDate = "";
              this.jobPostingForm.patchValue({
                bookingType: "1",
                recurring_type: "EWD",
                end_date: "",
                end_time: ""
              });
            } else {
              this.lbl_formatedEndDate = this.minToDate;
              this.isEndDateTime = true;
              this.jobPostingForm.patchValue({
                bookingType: "0",
                recurring_type: "ED",
                end_data: this.lbl_formatedEndDate,
                end_time: "16:00"
              });
            }
          }
        }, {
          key: "petTaxiFareCalcuation",
          value: function petTaxiFareCalcuation(distanceinMeter, travelTime) {
            var _this5 = this;

            var distanceinKms = (distanceinMeter / 1000).toFixed(1);
            var day = new Date(this.lbl_formatedStartDate).getDay();
            var minutes = travelTime / 60;
            var calcuatePrice = {
              meters: distanceinMeter,
              seconds: travelTime,
              daytime: this.jobPostingForm.value.start_time,
              dayVal: day
            };
            this.api.calcuatePetTaxiFare(calcuatePrice).subscribe(function (response) {
              if (response.status) {
                _this5.estimationTaxiPrice = response.amount;
              } else {
                _this5.api.showToast(response.error, "3000", "bottom");
              }
            }, function (err) {
              _this5.api.autoLogout(err, "");
            });
            this.jobPostingForm.patchValue({
              km_distance: distanceinKms,
              min_distance: minutes
            });
          }
        }, {
          key: "selectService",
          value: function selectService(event) {
            this.totalEstimatedCost = 1;
            this.weeklyEstimatedCost = 1;
            this.selectedService = event.detail.value;
            this.selectedServiceId = event.detail.value.id;
            this.SelectedServiceEvent = event;
            this.priceValues = event.detail.value.avgPrice;
            this.ServiceChargeType = event.detail.value.serviceChargeType;
            this.isOnceOff = event.detail.value.hideonce;

            if (this.selectedService.serviceName == "Pet Taxi") {
              this.isPetTaxi = true;
              this.startMinTime = "00:00";
            } else if (this.selectedService.serviceName != "Pet Taxi") {
              this.isPetTaxi = false; // this.isCreateButtonShown = true;

              this.startMinTime = "05:00";
              this.distanceForPetTaxi = "";
              this.travelTime = "";
              this.googleMapShown = false;
              this.destinationLocation = "";
              this.pickupLocation = "";
              this.jobPostingForm.patchValue({
                pickup_address: "",
                destination_address: "",
                km_distance: "",
                min_distance: "",
                taxi_way: "",
                petTaxiCleaninessAgree: true,
                pickup_suburb: "",
                destination_suburb: ""
              });
            }

            if (this.selectedService.allow_reoccurring == 1) {
              this.isRecurring = true;
            } else if (this.selectedService.allow_reoccurring == 0) {
              this.isRecurring = false;
            }

            if (this.ServiceChargeType != "0") {
              this.hideServices = true;
            }

            if (this.ServiceChargeType == "0") {
              this.hideServices = false;
            }

            if (this.selectedService.allow_reoccurring == 1) {
              this.isRecurring = true;
              this.hideBothDaySelector = false;
            }

            this.setHideOnce(event.detail.value.hideonce);

            if (event.detail.value.serviceChargeType == 3) {
              this.isEndDateTime = false;
            }

            if (event.detail.value.serviceChargeType != 3) {
              this.isEndDateTime = true;
              this.setHideOnce(event.detail.value.hideonce);
            }

            if (event.detail.value.id == "") {
              this.is_service_type_id = true;
            } else {
              this.is_service_type_id = false;
            }

            if (this.selectedPetIds.length) {
              this.isPetSelected = false;
            } else {
              this.isPetSelected = true;
            }

            if (this.selectedMode == undefined) {
              this.isFormValid = false;
            } else if (this.selectedPetIds.length == 0) {
              this.isFormValid = false;
            } else if (this.selectedMode != undefined && this.selectedPetIds.length) {
              if (this.ServiceChargeType == "0") {
                this.isFormValid = true;
              } else if (this.ServiceChargeType != "0") {
                if (this.jobPostingForm.value.recurring_type != this.CUSTOM || this.jobPostingForm.value.recurring_type != this.ONCE_A_WEEK) {
                  if (this.jobPostingForm.value.recurring_type != "") {
                    this.isFormValid = true;
                  } else {
                    this.isFormValid = false;
                  }
                } else if (this.jobPostingForm.value.recurring == this.CUSTOM || this.jobPostingForm.value.recurring_type == this.ONCE_A_WEEK) {
                  if (this.jobPostingForm.value.booking_days != "") {
                    this.isFormValid = true;
                  } else {
                    this.isFormValid = false;
                  }
                }
              }
            } else {
              this.isFormValid = false;
            }

            this.pricesOfSelectedPet();
          } //Custom Calender Selector

        }, {
          key: "customDays",
          value: function customDays(event) {
            var val = event.detail.value;
            this.daysBetweenCustomDateSelected = [];
            this.customSelectedDays = val.length;
            this.pricesOfSelectedPet();

            if (this.isOneOffDateSelector || this.isRecurringDateSelector) {
              if (this.jobPostingForm.value.recurring_type == "") {
                this.is_recurringType = true;
              }

              if (this.jobPostingForm.value.recurring_type != "") {
                this.is_recurringType = false;
              }

              if (this.selectedDayStatus == this.CUSTOM && this.isCustomDays) {
                if (val != "") {
                  this.is_booking_days = false;
                } else {
                  this.is_booking_days = true;
                }

                this.isWeekend(this.frmDate, this.toDate);
              }

              if (this.selectedPetIds.length) {
                this.isPetSelected = false;
              } else {
                this.isPetSelected = true;
              }

              if (this.selectedMode == undefined) {
                this.isFormValid = false;
              } else if (this.selectedPetIds.length == 0) {
                this.isFormValid = false;
              } else if (this.selectedMode != undefined && this.selectedPetIds.length) {
                if (this.ServiceChargeType == 0) {
                  this.isFormValid = true;
                } else if (this.ServiceChargeType != "0") {
                  if (this.jobPostingForm.value.recurring_type != this.CUSTOM || this.jobPostingForm.value.recurring_type != this.ONCE_A_WEEK) {
                    if (this.jobPostingForm.value.recurring_type != "") {
                      this.isFormValid = true;
                    } else {
                      this.isFormValid = false;
                    }
                  } else if (this.jobPostingForm.value.recurring == this.CUSTOM || this.jobPostingForm.value.recurring_type == this.ONCE_A_WEEK) {
                    if (this.jobPostingForm.value.booking_days != "") {
                      this.isFormValid = true;
                    } else {
                      this.isFormValid = false;
                    }
                  }
                }
              } else {
                this.isFormValid = false;
              }
            }

            if (this.selectedPetIds.length) {
              this.isPetSelected = false;
            } else {
              this.isPetSelected = true;
            }

            if (event.detail.value == this.ONCE_A_WEEK || event.detail.value == this.CUSTOM) {
              if (this.jobPostingForm.value.booking_days == "") {
                this.isFormValid = false;
              }
            } else if (this.selectedMode == undefined) {
              this.isFormValid = false;
            } else if (this.selectedPetIds.length == 0) {
              this.isFormValid = false;
            } else if (this.selectedMode != undefined && this.selectedPetIds.length) {
              if (this.ServiceChargeType == 0) {
                this.isFormValid = true;
              } else if (this.ServiceChargeType != 0) {
                if (this.jobPostingForm.value.recurring_type != this.CUSTOM || this.jobPostingForm.value.recurring_type != this.ONCE_A_WEEK) {
                  if (this.jobPostingForm.value.recurring_type != "") {
                    this.isFormValid = true;
                  } else {
                    this.isFormValid = false;
                  }
                } else if (this.jobPostingForm.value.recurring == this.CUSTOM || this.jobPostingForm.value.recurring_type == this.ONCE_A_WEEK) {
                  if (this.jobPostingForm.value.booking_days != "") {
                    this.isFormValid = true;
                  } else {
                    this.isFormValid = false;
                  }
                }
              }
            } else {
              this.isFormValid = false;
            }

            this.is_booking_days == true ? this.isFormValid = false : this.isFormValid = true;
          } // Mode Select

        }, {
          key: "selectMode",
          value: function selectMode(event) {
            this.selectedMode = event.detail.value;

            if (event.detail.value == "0") {
              this.isrecurringSelected = false;
              this.isOneOffDateSelector = true;
              this.isRecurringDateSelector = false;
              this.hideBothDaySelector = false; // Clear Form Values

              this.jobPostingForm.patchValue({
                recurring_type: "",
                booking_days: ""
              });
            } else {
              this.hideBothDaySelector = true;
              this.isrecurringSelected = true;
              this.isOneOffDateSelector = false;
              this.isRecurringDateSelector = true;
            }

            if (event.detail.value == "") {
              this.isbookingType = true;
            } else {
              this.isbookingType = false;
              this.weeklyEstimatedCost = 1;
              this.totalEstimatedCost = 1;
              this.pricesOfSelectedPet();
            }

            if (this.selectedPetIds.length) {
              this.isPetSelected = false;
            } else {
              this.isPetSelected = true;
            }

            if (this.selectedPetIds.length) {
              this.isPetSelected = false;
            } else {
              this.isPetSelected = true;
            }

            if (this.jobPostingForm.value.service_type_id == "") {
              this.isFormValid = false;
            } else if (this.selectedMode == undefined) {
              this.isFormValid = false;
            } else if (this.selectedPetIds.length == 0) {
              this.isFormValid = false;
            } else if (this.selectedMode != undefined && this.selectedPetIds.length) {
              if (this.ServiceChargeType == 0) {
                this.isFormValid = true;
              } else if (this.ServiceChargeType != 0) {
                if (this.jobPostingForm.value.recurring_type != this.CUSTOM || this.jobPostingForm.value.recurring_type != this.ONCE_A_WEEK) {
                  if (this.jobPostingForm.value.recurring_type != "") {
                    this.isFormValid = true;
                  } else {
                    this.isFormValid = false;
                  }
                } else if (this.jobPostingForm.value.recurring == this.CUSTOM || this.jobPostingForm.value.recurring_type == this.ONCE_A_WEEK) {
                  if (this.jobPostingForm.value.booking_days != "") {
                    this.isFormValid = true;
                  } else {
                    this.isFormValid = false;
                  }
                }
              }
            } else {
              this.isFormValid = false;
            }
          }
        }, {
          key: "selectDays",
          value: function selectDays(event) {
            this.selectedDayStatus = event.detail.value;
            this.jobPostingForm.patchValue({
              booking_days: ""
            });

            if (event.detail.value == this.ONCE_A_WEEK || event.detail.value == this.CUSTOM) {
              this.isCustomDays = true;

              if (event.detail.value == this.ONCE_A_WEEK) {
                this.isMultipleDays = false;
              } else {
                this.isMultipleDays = true;
              }
            } else {
              this.is_booking_days = false;
              this.jobPostingForm.get("booking_days").clearValidators();
              this.jobPostingForm.get("booking_days").updateValueAndValidity();
              this.isCustomDays = false;
              this.jobPostingForm.patchValue({
                booking_days: ""
              });
            }

            if (this.isOneOffDateSelector || this.isRecurringDateSelector) {
              if (event.detail.value == "") {
                this.is_recurringType = true;
              }

              if (event.detail.value != "") {
                this.is_recurringType = false;
                this.pricesOfSelectedPet();
              }
            }

            if (this.selectedPetIds.length) {
              this.isPetSelected = false;
            } else {
              this.isPetSelected = true;
            }

            if (event.detail.value == this.ONCE_A_WEEK || event.detail.value == this.CUSTOM) {
              if (this.jobPostingForm.value.booking_days == "") {
                this.isFormValid = false;
              }
            } else if (this.selectedMode == undefined) {
              this.isFormValid = false;
            } else if (this.selectedPetIds.length == 0) {
              this.isFormValid = false;
            } else if (this.selectedMode != undefined && this.selectedPetIds.length) {
              if (this.ServiceChargeType == 0) {
                this.isFormValid = true;
              } else if (this.ServiceChargeType != 0) {
                if (this.jobPostingForm.value.recurring_type != this.CUSTOM || this.jobPostingForm.value.recurring_type != this.ONCE_A_WEEK) {
                  if (this.jobPostingForm.value.recurring_type != "") {
                    this.isFormValid = true;
                  } else {
                    this.isFormValid = false;
                  }
                } else if (this.jobPostingForm.value.recurring == this.CUSTOM || this.jobPostingForm.value.recurring_type == this.ONCE_A_WEEK) {
                  if (this.jobPostingForm.value.booking_days != "") {
                    this.isFormValid = true;
                  } else {
                    this.isFormValid = false;
                  }
                }
              }
            } else {
              this.isFormValid = false;
            }

            this.isWeekend(this.frmDate, this.toDate);
          }
          /**
           * get Recurring options get Servies and Recurring Type
           */

        }, {
          key: "getRecurringOptions",
          value: function getRecurringOptions() {
            var _this6 = this;

            this.api.showLoader();
            this.api.recurringOptions().pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.finalize)(function () {
              _this6.api.hideLoader();
            })).subscribe(function (res) {
              return (0, tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(_this6, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
                return _regeneratorRuntime().wrap(function _callee6$(_context6) {
                  while (1) {
                    switch (_context6.prev = _context6.next) {
                      case 0:
                        _context6.next = 2;
                        return res;

                      case 2:
                        this.recurringOptions = _context6.sent;
                        _context6.next = 5;
                        return this.recurringOptions.progress;

                      case 5:
                        this.progressStepper = _context6.sent;
                        this.isPhEmailVerified = this.recurringOptions.progress.email == 1 ? true : false;
                        this.isMessagesContainerSectionLoaded = true;
                        this.jobPostingForm.get("service_type_id").setValue(res.services[0]);
                        this.SelectedValueOfService = res.services[0];

                        if (res.services[0].serviceName == "Pet Taxi") {
                          this.isPetTaxi = true;
                          this.startMinTime = "00:00";
                        } else {
                          this.isPetTaxi = false; //   this.isCreateButtonShown = true;

                          this.startMinTime = "08:30";
                        }

                        this.setHideOnce(res.services[0].hideonce);

                        if (res.services[0].serviceChargeType == 3) {
                          this.isEndDateTime = false;
                          this.jobPostingForm.patchValue({
                            end_date: "",
                            end_time: "",
                            bookingType: 0,
                            recurring_type: "ED"
                          });
                          this.lbl_formatedEndDate = "";
                        }

                        this.compareWith = this.compareWithFn;
                        this.isWeekend(this.frmDate, this.toDate);

                      case 15:
                      case "end":
                        return _context6.stop();
                    }
                  }
                }, _callee6, this);
              }));
            }, function (err) {
              _this6.isMessagesContainerSectionLoaded = false;

              _this6.api.autoLogout(err, "");
            });
          }
        }, {
          key: "formatTime",
          value: function formatTime(time) {
            var timeFormat = moment__WEBPACK_IMPORTED_MODULE_3__(time, ["HH.mm"]).format("hh:mma");
            return timeFormat; // return adjusted time or original string
          }
          /**
           * Create job
           */

        }, {
          key: "createJob",
          value: function createJob() {
            return (0, tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
              var _this7 = this;

              var resUser, start_date, end_date, start_time, end_time, booking_days, jobPostForm;
              return _regeneratorRuntime().wrap(function _callee8$(_context8) {
                while (1) {
                  switch (_context8.prev = _context8.next) {
                    case 0:
                      this.isCreateButtonShown = true;
                      _context8.next = 3;
                      return this.storage.get(_api_petcloud_api_service__WEBPACK_IMPORTED_MODULE_2__.PetcloudApiService.USER);

                    case 3:
                      resUser = _context8.sent;

                      if (this.isPhEmailVerified) {
                        _context8.next = 8;
                        break;
                      }

                      this.api.showToast("Please verify email and mobile number", 2000, "bottom");
                      _context8.next = 45;
                      break;

                    case 8:
                      if (!(!resUser.address || !resUser.street_address)) {
                        _context8.next = 12;
                        break;
                      }

                      this.api.showToast("Please enter address details in profile before posting jobs", 2000, "bottom");
                      _context8.next = 45;
                      break;

                    case 12:
                      if (!(!this.isPetTaxi && new Date(this.lbl_formatedEndDate) < new Date(this.lbl_formatedStartDate))) {
                        _context8.next = 16;
                        break;
                      }

                      this.api.showToast("Start Date is less then end date", "3000", "bottom");
                      _context8.next = 45;
                      break;

                    case 16:
                      if (this.selectedPetIds.length) {
                        this.isNoPets = false;
                      } else {
                        this.isNoPets = true;
                      } //Main Logic of Inserting pet Id's


                      this.jobPostingForm.value.pets = [];
                      this.selectedPetIds.forEach(function (element) {
                        _this7.jobPostingForm.value.pets.push(element);
                      });
                      start_date = new _angular_common__WEBPACK_IMPORTED_MODULE_11__.DatePipe("en-US").transform(this.lbl_formatedStartDate, "EEE dd MMM y");
                      end_date = new _angular_common__WEBPACK_IMPORTED_MODULE_11__.DatePipe("en-US").transform(this.lbl_formatedEndDate, "EEE dd MMM y");
                      this.jobPostingForm.value.service_type_id = this.selectedServiceId;
                      start_time = this.formatTime(this.jobPostingForm.value.start_time);
                      end_time = this.formatTime(this.jobPostingForm.value.end_time);

                      if (this.isEndDateTime == false) {
                        this.jobPostingForm.patchValue({
                          end_date: "",
                          end_time: ""
                        });
                      }

                      booking_days = [];

                      if (this.jobPostingForm.value.recurring_type == this.ONCE_A_WEEK) {
                        booking_days.push(this.jobPostingForm.value.booking_days);
                      }

                      jobPostForm = {};

                      if (this.isPetTaxi) {
                        jobPostForm = {
                          service_type_id: this.selectedServiceId,
                          pets: this.selectedPetIds,
                          end_date: this.isEndDateTime == false ? "" : end_date,
                          description: this.jobPostingForm.value.description,
                          end_time: this.isEndDateTime == false ? "" : end_time,
                          bookingType: this.jobPostingForm.value.bookingType,
                          booking_days: "",
                          recurring_type: "",
                          estimatecost: this.estimationTaxiPrice,
                          chkendDate: this.isEndDateTime == true ? 0 : 1,
                          pickup_date: start_date,
                          pickup_time: start_time,
                          pickup_address: this.jobPostingForm.value.pickup_address,
                          destination_address: this.jobPostingForm.value.destination_address,
                          km_distance: this.jobPostingForm.value.km_distance,
                          min_distance: this.jobPostingForm.value.min_distance,
                          taxi_way: 1,
                          pickup_suburb: this.jobPostingForm.value.pickup_suburb,
                          destination_suburb: this.jobPostingForm.value.destination_suburb
                        };
                      } else {
                        jobPostForm = {
                          service_type_id: this.selectedServiceId,
                          pets: this.selectedPetIds,
                          start_date: start_date,
                          end_date: this.isEndDateTime == false ? "" : end_date,
                          description: this.jobPostingForm.value.description,
                          start_time: start_time,
                          end_time: this.isEndDateTime == false ? "" : end_time,
                          bookingType: this.jobPostingForm.value.bookingType,
                          booking_days: this.jobPostingForm.value.recurring_type == this.WEEKEND ? ["6"] : this.jobPostingForm.value.recurring_type == this.EVERYDAY ? ["0", "1", "2", "3", "4", "5", "6"] : this.jobPostingForm.value.recurring_type == this.ONCE_A_WEEK ? booking_days : this.jobPostingForm.value.booking_days,
                          recurring_type: this.jobPostingForm.value.recurring_type,
                          estimatecost: this.jobPostingForm.value.bookingType == "0" ? this.totalEstimatedCost : this.weeklyEstimatedCost,
                          chkendDate: this.isEndDateTime == true ? 0 : 1,
                          pickup_date: "",
                          pickup_time: "",
                          pickup_address: "",
                          destination_address: "",
                          km_distance: "",
                          min_distance: "",
                          taxi_way: 0
                        };
                      }

                      if (!this.isPetTaxi) {
                        _context8.next = 43;
                        break;
                      }

                      if (!(this.pickupLocation == undefined || this.pickupLocation == "")) {
                        _context8.next = 35;
                        break;
                      }

                      this.api.showToast("Please enter your pickup location", 2000, "bottom");
                      return _context8.abrupt("return", false);

                    case 35:
                      if (!(this.destinationLocation == undefined || this.destinationLocation == "")) {
                        _context8.next = 40;
                        break;
                      }

                      this.api.showToast("Please enter your destination location", 2000, "bottom");
                      return _context8.abrupt("return", false);

                    case 40:
                      if (this.jobPostingForm.value.petTaxiCleaninessAgree) {
                        _context8.next = 43;
                        break;
                      }

                      this.api.showToast("Please enter your pet safety & cleaning terms & conditions", 2000, "bottom");
                      return _context8.abrupt("return", false);

                    case 43:
                      this.api.showLoader();
                      this.api.createJob(jobPostForm).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.finalize)(function () {
                        _this7.api.hideLoader();
                      })).subscribe(function (res) {
                        return (0, tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(_this7, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
                          var jobCount, analytics;
                          return _regeneratorRuntime().wrap(function _callee7$(_context7) {
                            while (1) {
                              switch (_context7.prev = _context7.next) {
                                case 0:
                                  if (!res.success) {
                                    _context7.next = 16;
                                    break;
                                  }

                                  this.analytics.logEvent(_api_petcloud_api_service__WEBPACK_IMPORTED_MODULE_2__.PetcloudApiService.job_posted_success, {
                                    userId: this.userId
                                  });
                                  _context7.next = 4;
                                  return this.api.postedJobCount();

                                case 4:
                                  this.api.showToast("Job posted successful", 2000, "bottom");
                                  jobCount = parseInt(localStorage.getItem(_api_petcloud_api_service__WEBPACK_IMPORTED_MODULE_2__.PetcloudApiService.TOTALPOSTEDJOB)) + 1;
                                  analytics = {
                                    last_job_posted_date: res.last_job_posted_date,
                                    first_job_posted_date: res.first_job_posted_date,
                                    job_posted_count: res.job_posted_count,
                                    user_id: res.user_id,
                                    post_id: res.post_id,
                                    app_version: this.appsFlyerAnalytics.getCurrentVersionCode(),
                                    services_needed: res.services_needed,
                                    start_date: res.start_date,
                                    end_date: res.end_data,
                                    start_time: res.start_time,
                                    end_time: res.end_time,
                                    total_time: res.total_time,
                                    total_days: res.total_days,
                                    app_type: this.appsFlyerAnalytics.platformName()
                                  };
                                  this.appsFlyerAnalytics.postJobAnalytics(analytics);
                                  _context7.next = 10;
                                  return this.getPetsListing();

                                case 10:
                                  _context7.next = 12;
                                  return this.getRecurringOptions();

                                case 12:
                                  if (this.isEndDateTime == false) {
                                    this.isEndDateTime = true;
                                    this.jobPostingForm.patchValue({
                                      end_date: this.jobPostingForm.value.start_date,
                                      end_time: "16:00"
                                    });
                                  }

                                  this.router.navigateByUrl("/job-posted-success");
                                  _context7.next = 18;
                                  break;

                                case 16:
                                  this.analytics.logEvent(_api_petcloud_api_service__WEBPACK_IMPORTED_MODULE_2__.PetcloudApiService.job_posted_fail, {
                                    userId: this.userId
                                  });
                                  this.api.showToast("Job not posted, Try again!", 2000, "bottom");

                                case 18:
                                case "end":
                                  return _context7.stop();
                              }
                            }
                          }, _callee7, this);
                        }));
                      }, function (err) {
                        _this7.api.autoLogout(err, jobPostForm);
                      });

                    case 45:
                    case "end":
                      return _context8.stop();
                  }
                }
              }, _callee8, this);
            }));
          }
        }, {
          key: "getPetsListing",
          value: function getPetsListing() {
            var _this8 = this;

            this.storage.get(_api_petcloud_api_service__WEBPACK_IMPORTED_MODULE_2__.PetcloudApiService.USER).then(function (userData) {
              _this8.userId = userData.id;

              _this8.api.getPetList(userData.id).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.finalize)(function () {
                _this8.api.hideLoader();
              })).subscribe(function (res) {
                if (res.success) {
                  _this8.getRecurringOptions();

                  if (res.pets.length > 0) {
                    _this8.isNoPets = false; //Clear Form

                    _this8.isPetAvailable = true;
                    _this8.petList = [];
                    _this8.petList = res.pets; // assign list object to local variable.

                    _this8.jobPostingForm.value.pets = [];
                    _this8.selectedPetIds = [];
                    _this8.selectedpetType = [];

                    _this8.petList.forEach(function (element) {
                      _this8.selectedPetIds.push(element.id);

                      _this8.selectedpetType.push(element.petType);

                      _this8.jobPostingForm.value.pets.push(element.id);
                    });

                    _this8.diffDays = 2;
                    _this8.differenceDays = 2;

                    _this8.pricesOfSelectedPet();
                  } else {
                    _this8.isNoPets = true;
                    _this8.isPetAvailable = false;
                  }
                } else {
                  _this8.api.showToast("No pet found! add new family member", 200, "bottom");
                }
              }, function (err) {
                _this8.api.hideLoader();

                _this8.api.showToast("No pet found! add new family member", 2000, "bottom");

                _this8.api.autoLogout(err, userData.id);
              });
            }, function (err) {});
          }
        }, {
          key: "goToAddMoney",
          value: function goToAddMoney() {
            this.router.navigateByUrl("/addmoney");
          }
        }, {
          key: "navigateMyJobs",
          value: function navigateMyJobs() {
            this.router.navigateByUrl("/jobs");
          }
        }, {
          key: "clearPetTaxiValue",
          value: function clearPetTaxiValue() {
            if (this.isPetTaxi) {
              this.jobPostingForm.patchValue({
                pickup_address: "",
                destination_address: "",
                km_distance: "",
                min_distance: "",
                taxi_way: "",
                pickup_suburb: "",
                destination_suburb: ""
              });
              this.distanceForPetTaxi = "";
              this.travelTime = "";
              this.taxiTravelTimeinSecond = "";
              this.destinationLocation = "";
              this.pickupLocation = "";
              this.googleMapShown = false;
              this.estimationTaxiPrice = "";
              this.isCreateButtonShown = true;
            }
          }
        }, {
          key: "openFromDateCalender",
          value: function openFromDateCalender(date_type) {
            var _this9 = this;

            this.clearPetTaxiValue();
            this.datePicker.show({
              date: new Date(this.lbl_formatedStartDate),
              mode: "date",
              minDate: this.platform.is("ios") ? new Date() : new Date().valueOf(),
              allowOldDates: false,
              allowFutureDates: true,
              androidTheme: 5
            }).then(function (date) {
              return (0, tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(_this9, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
                return _regeneratorRuntime().wrap(function _callee9$(_context9) {
                  while (1) {
                    switch (_context9.prev = _context9.next) {
                      case 0:
                        if (date) {
                          this.fromDate(date);
                        }

                      case 1:
                      case "end":
                        return _context9.stop();
                    }
                  }
                }, _callee9, this);
              }));
            }, function (err) {
              return console.log("Error occurred while getting date: ", err);
            });
          }
        }, {
          key: "openToCalender",
          value: function openToCalender(date_type) {
            var _this10 = this;

            this.datePicker.show({
              date: new Date(this.lbl_formatedEndDate),
              mode: "date",
              minDate: this.platform.is("ios") ? new Date() : new Date().valueOf(),
              allowOldDates: false,
              allowFutureDates: true,
              androidTheme: 5
            }).then(function (date) {
              return (0, tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(_this10, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
                return _regeneratorRuntime().wrap(function _callee10$(_context10) {
                  while (1) {
                    switch (_context10.prev = _context10.next) {
                      case 0:
                        if (date) {
                          this.endDateChange(date);
                        }

                      case 1:
                      case "end":
                        return _context10.stop();
                    }
                  }
                }, _callee10, this);
              }));
            }, function (err) {
              return console.log("Error occurred while getting date: ", err);
            });
          }
        }, {
          key: "sendEmailtoAccounts",
          value: function sendEmailtoAccounts() {
            return (0, tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {
              return _regeneratorRuntime().wrap(function _callee11$(_context11) {
                while (1) {
                  switch (_context11.prev = _context11.next) {
                    case 0:
                      this.api.sendEmailtoAccounts("accounts@petcloud.com.au", ["kirtan.p@shaligraminfotech.com"], "Pet Cloud app review", "");

                    case 1:
                    case "end":
                      return _context11.stop();
                  }
                }
              }, _callee11, this);
            }));
          }
        }, {
          key: "getDistanceFromLatLonInKm",
          value: function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {
            var _this11 = this;

            var origin = new google.maps.LatLng(lat1, lon1);
            var destination = new google.maps.LatLng(lat2, lon2);
            var service = new google.maps.DistanceMatrixService();
            service.getDistanceMatrix({
              origins: [origin],
              destinations: [destination],
              travelMode: "DRIVING",
              avoidHighways: false,
              avoidTolls: false
            }, function (response, status) {
              if (status == "OK") {
                if (response.rows) {
                  if (response.rows.length) {
                    var distance = response.rows[0].elements[0].distance.text;
                    var time = response.rows[0].elements[0].duration.text;
                    _this11.distanceForPetTaxi = distance;
                    _this11.travelTime = time;
                    _this11.taxiTravelTimeinSecond = response.rows[0].elements[0].duration.value;

                    _this11.petTaxiFareCalcuation(response.rows[0].elements[0].distance.value, response.rows[0].elements[0].duration.value);
                  }
                }
              }
            }, function (err) {
              _this11.api.showAlert("", "Error in getting distance", "");

              console.log("error", err);
            });
          }
        }, {
          key: "deg2rad",
          value: function deg2rad(deg) {
            return deg * (Math.PI / 180);
          }
        }, {
          key: "calculateAndDisplayRoute",
          value: function calculateAndDisplayRoute() {
            var _this12 = this;

            this.googleMapShown = true;
            this.isCreateButtonShown = true;
            var distance = this.getDistanceFromLatLonInKm(this.origin.lat, this.origin.lng, this.destination.lat, this.destination.lng);
            this.directionsService.route({
              origin: this.origin,
              destination: this.destination,
              optimizeWaypoints: true,
              avoidHighways: false,
              avoidTolls: false,
              travelMode: google.maps.TravelMode.DRIVING
            }).then(function (response) {
              _this12.directionsDisplay.setDirections(response);
            })["catch"](function (e) {
              return console.log("error", e);
            });
          }
        }, {
          key: "handleAddressChange",
          value: function handleAddressChange(location, address) {
            return (0, tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {
              var _this13 = this;

              var start_location, end_location;
              return _regeneratorRuntime().wrap(function _callee14$(_context14) {
                while (1) {
                  switch (_context14.prev = _context14.next) {
                    case 0:
                      this.isFooterShown();
                      start_location = null, end_location = null;

                      if (!(location == "start_location")) {
                        _context14.next = 11;
                        break;
                      }

                      start_location = address.formatted_address;
                      this.loadMap(location, address);
                      this.pickupLocation = start_location;
                      this.jobPostingForm.patchValue({
                        pickup_address: start_location + address.vicinity
                      });
                      _context14.next = 9;
                      return this.api.getSuburb(address.geometry.location.lat(), address.geometry.location.lng()).subscribe(function (response) {
                        return (0, tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(_this13, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {
                          return _regeneratorRuntime().wrap(function _callee12$(_context12) {
                            while (1) {
                              switch (_context12.prev = _context12.next) {
                                case 0:
                                  this.jobPostingForm.patchValue({
                                    pickup_suburb: response.locality
                                  });

                                case 1:
                                case "end":
                                  return _context12.stop();
                              }
                            }
                          }, _callee12, this);
                        }));
                      });

                    case 9:
                      _context14.next = 17;
                      break;

                    case 11:
                      end_location = address.formatted_address;
                      this.loadMap(location, address);
                      this.jobPostingForm.patchValue({
                        destination_address: end_location
                      });
                      this.destinationLocation = end_location;
                      _context14.next = 17;
                      return this.api.getSuburb(address.geometry.location.lat(), address.geometry.location.lng()).subscribe(function (response) {
                        return (0, tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(_this13, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {
                          return _regeneratorRuntime().wrap(function _callee13$(_context13) {
                            while (1) {
                              switch (_context13.prev = _context13.next) {
                                case 0:
                                  this.jobPostingForm.patchValue({
                                    destination_suburb: response.locality
                                  });

                                case 1:
                                case "end":
                                  return _context13.stop();
                              }
                            }
                          }, _callee13, this);
                        }));
                      });

                    case 17:
                    case "end":
                      return _context14.stop();
                  }
                }
              }, _callee14, this);
            }));
          }
        }, {
          key: "loadMap",
          value: function loadMap(location, address) {
            if (location == "start_location") {
              this.origin = {
                lat: parseFloat(address.geometry.location.lat()),
                lng: address.geometry.location.lng()
              };
            } else {
              this.destination = {
                lat: parseFloat(address.geometry.location.lat()),
                lng: address.geometry.location.lng()
              };
            }

            if (this.origin != undefined && this.destination != undefined) {
              var map = new google.maps.Map(this.mapNativeElement.nativeElement, {
                zoom: 7,
                center: {
                  lat: address.geometry.location.lat(),
                  lng: address.geometry.location.lng()
                }
              });
              this.directionsDisplay.setMap(map);
              this.calculateAndDisplayRoute();
            }
          }
        }, {
          key: "onPetTaxiAgreement",
          value: function onPetTaxiAgreement(event) {
            this.jobPostingForm.patchValue({
              petTaxiCleaninessAgree: event.detail.checked
            });
          }
        }, {
          key: "petTaxiAgreement",
          value: function petTaxiAgreement() {
            return (0, tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {
              var modal;
              return _regeneratorRuntime().wrap(function _callee15$(_context15) {
                while (1) {
                  switch (_context15.prev = _context15.next) {
                    case 0:
                      _context15.next = 2;
                      return this.model.create({
                        component: _pet_taxi_agreement_model_pet_taxi_agreement_model_component__WEBPACK_IMPORTED_MODULE_7__.PetTaxiAgreementModelComponent,
                        animated: true
                      });

                    case 2:
                      modal = _context15.sent;
                      modal.onDidDismiss().then(function (data) {});
                      _context15.next = 6;
                      return modal.present();

                    case 6:
                      return _context15.abrupt("return", _context15.sent);

                    case 7:
                    case "end":
                      return _context15.stop();
                  }
                }
              }, _callee15, this);
            }));
          } // active hardware back button

        }, {
          key: "backButtonEvent",
          value: function backButtonEvent() {
            var _this14 = this;

            this.platform.backButton.subscribe(function () {
              return (0, tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(_this14, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {
                return _regeneratorRuntime().wrap(function _callee16$(_context16) {
                  while (1) {
                    switch (_context16.prev = _context16.next) {
                      case 0:
                        this.api.dismissModelorAlert();

                        if (this.router.url === "/home/tabs/jobs-tab/post-job") {
                          this.navCtrl.navigateRoot("/home/tabs/sitter-listing");
                        }

                      case 2:
                      case "end":
                        return _context16.stop();
                    }
                  }
                }, _callee16, this);
              }));
            });
          }
        }, {
          key: "isValidFromTime",
          value: function isValidFromTime() {
            var ONE_HOUR = 60 * 60 * 1000;
            /* ms */

            var satrtDate = this.lbl_formatedStartDate;
            var startTime = this.jobPostingForm.value.start_time;
            var endDate = this.lbl_formatedEndDate;
            var endTime = this.jobPostingForm.value.end_time;
            var resp = {
              isValidStart: true,
              isValidEndDate: true,
              isValidEndTime: true
            };
            var startDateTime;
            var endDateTime;

            if (satrtDate && startTime) {
              var startTimeArry = startTime.split(':');
              startDateTime = new Date(satrtDate).setHours(startTimeArry[0], startTimeArry[1], 0, 0);
            }

            if (endDate && endTime) {
              var endTimeArry = endTime.split(':');
              endDateTime = new Date(endDate).setHours(endTimeArry[0], endTimeArry[1], 0, 0);
            }

            if (startDateTime) {
              resp.isValidStart = !(new Date(startDateTime).getTime() - new Date().getTime() < ONE_HOUR);
            }

            if (endDateTime) {
              resp.isValidEndTime = !(new Date(endDateTime).getTime() - new Date(startDateTime).getTime() < ONE_HOUR);
            }

            if (startDateTime && endDateTime) {
              var start = new Date(startDateTime).setHours(0, 0, 0, 0);
              var end = new Date(endDateTime).setHours(0, 0, 0, 0);
              resp.isValidEndDate = !(end < start);
            }

            return resp;
          }
        }]);

        return PostJobPage;
      }();

      _PostJobPage.ctorParameters = function () {
        return [{
          type: _angular_forms__WEBPACK_IMPORTED_MODULE_8__.FormBuilder
        }, {
          type: _api_petcloud_api_service__WEBPACK_IMPORTED_MODULE_2__.PetcloudApiService
        }, {
          type: _ionic_storage__WEBPACK_IMPORTED_MODULE_12__.Storage
        }, {
          type: _angular_common__WEBPACK_IMPORTED_MODULE_11__.Location
        }, {
          type: _ionic_angular__WEBPACK_IMPORTED_MODULE_13__.ModalController
        }, {
          type: _ionic_angular__WEBPACK_IMPORTED_MODULE_13__.NavController
        }, {
          type: _ionic_angular__WEBPACK_IMPORTED_MODULE_13__.Platform
        }, {
          type: _angular_router__WEBPACK_IMPORTED_MODULE_14__.Router
        }, {
          type: _ionic_native_date_picker_ngx__WEBPACK_IMPORTED_MODULE_4__.DatePicker
        }, {
          type: _angular_router__WEBPACK_IMPORTED_MODULE_14__.ActivatedRoute
        }, {
          type: _analytics_service__WEBPACK_IMPORTED_MODULE_5__.AnalyticsService
        }, {
          type: _apps_flyer_service__WEBPACK_IMPORTED_MODULE_6__.AppsFlyerService
        }];
      };

      _PostJobPage.propDecorators = {
        mapNativeElement: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_15__.ViewChild,
          args: ["mapElement"]
        }]
      };
      _PostJobPage = (0, tslib__WEBPACK_IMPORTED_MODULE_9__.__decorate)([(0, _angular_core__WEBPACK_IMPORTED_MODULE_15__.Component)({
        selector: "app-post-job",
        template: _raw_loader_post_job_page_html__WEBPACK_IMPORTED_MODULE_0__["default"],
        styles: [_post_job_page_scss__WEBPACK_IMPORTED_MODULE_1__["default"]]
      })], _PostJobPage);
      /***/
    },

    /***/
    67087:
    /*!*********************************************!*\
      !*** ./src/app/post-job/post-job.page.scss ***!
      \*********************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = ".petList .petItem .petProfile {\n  --border-radius: 50%;\n}\n.petList .petItem .petName {\n  font-weight: 600;\n  font-size: 16px;\n  color: #4A4A4A;\n  letter-spacing: 0;\n  text-decoration: none;\n}\n@media (min-width: 320px) and (max-width: 375px) {\n  ion-datetime {\n    font-size: 14px;\n  }\n}\n.look-input-item {\n  --padding-start: 0;\n}\n.search-input {\n  background: #ffffff;\n  color: #000000;\n  --placeholder-color: #888888;\n  border: none;\n  width: 100%;\n  height: auto;\n  padding: 0.5em;\n  border-radius: 3px;\n  font-size: 15px;\n  border: 1px solid #888;\n  -webkit-appearance: none;\n}\n.search-input:focus {\n  outline: 0;\n}\n.map {\n  height: 300px;\n  width: 100%;\n  position: relative;\n  overflow: hidden;\n}\n.rm-padding {\n  padding: 0px !important;\n}\n.pet-item-title {\n  --padding-start: 0px;\n}\nion-grid, ion-row, ion-col {\n  padding: 0px;\n  margin: 0px;\n}\nion-item {\n  --padding-start: 0px;\n  --inner-padding-end: 0px;\n}\n.radio-btns-row .error {\n  padding: 0px 5px;\n  margin: 0px;\n}\nion-textarea {\n  border: 1px solid #dedede;\n  padding-left: 10px;\n  padding-right: 10px;\n  margin-top: 16px;\n}\n.time-col {\n  padding-left: 5px;\n}\n.date-col {\n  padding-right: 5px;\n}\n.look-input-item .look-input {\n  padding: 10px 0 11px;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBvc3Qtam9iLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFSTtFQUNFLG9CQUFBO0FBRE47QUFJSTtFQUNFLGdCQUFBO0VBQ0EsZUFBQTtFQUNBLGNBQUE7RUFDQSxpQkFBQTtFQUNBLHFCQUFBO0FBRk47QUFNQTtFQUNFO0lBQ0UsZUFBQTtFQUhGO0FBQ0Y7QUFLQTtFQUNFLGtCQUFBO0FBSEY7QUFLQTtFQUNFLG1CQUFBO0VBQ0EsY0FBQTtFQUNBLDRCQUFBO0VBRUEsWUFBQTtFQUNBLFdBQUE7RUFDQSxZQUFBO0VBQ0EsY0FBQTtFQUNBLGtCQUFBO0VBQ0EsZUFBQTtFQUNBLHNCQUFBO0VBQ0Esd0JBQUE7QUFIRjtBQUtFO0VBQ0ksVUFBQTtBQUhOO0FBT0E7RUFDRSxhQUFBO0VBQ0EsV0FBQTtFQUNBLGtCQUFBO0VBQ0EsZ0JBQUE7QUFKRjtBQU1BO0VBQ0UsdUJBQUE7QUFIRjtBQUtBO0VBQ0Usb0JBQUE7QUFGRjtBQUlBO0VBQ0UsWUFBQTtFQUNBLFdBQUE7QUFERjtBQUdBO0VBQ0Usb0JBQUE7RUFDQSx3QkFBQTtBQUFGO0FBR0U7RUFDRSxnQkFBQTtFQUNBLFdBQUE7QUFBSjtBQUdBO0VBQ0UseUJBQUE7RUFDQSxrQkFBQTtFQUNBLG1CQUFBO0VBQ0EsZ0JBQUE7QUFBRjtBQUVBO0VBQ0UsaUJBQUE7QUFDRjtBQUNBO0VBQ0Usa0JBQUE7QUFFRjtBQUFBO0VBQ0Usb0JBQUE7QUFHRiIsImZpbGUiOiJwb3N0LWpvYi5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIucGV0TGlzdCB7XG4gIC5wZXRJdGVtIHtcbiAgICAucGV0UHJvZmlsZSB7XG4gICAgICAtLWJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICB9XG5cbiAgICAucGV0TmFtZSB7XG4gICAgICBmb250LXdlaWdodDogNjAwO1xuICAgICAgZm9udC1zaXplOiAxNnB4O1xuICAgICAgY29sb3I6ICM0QTRBNEE7XG4gICAgICBsZXR0ZXItc3BhY2luZzogMDtcbiAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICB9XG4gIH1cbn1cbkBtZWRpYSAobWluLXdpZHRoOjMyMHB4KSBhbmQgKG1heC13aWR0aDozNzVweCl7XG4gIGlvbi1kYXRldGltZXtcbiAgICBmb250LXNpemU6MTRweDtcbiAgfVxufVxuLmxvb2staW5wdXQtaXRlbSB7XG4gIC0tcGFkZGluZy1zdGFydDogMDtcbn1cbi5zZWFyY2gtaW5wdXQge1xuICBiYWNrZ3JvdW5kOiAjZmZmZmZmO1xuICBjb2xvcjogIzAwMDAwMDtcbiAgLS1wbGFjZWhvbGRlci1jb2xvcjogIzg4ODg4ODtcbiAgLy8gYm9yZGVyLXJhZGl1czo0cHg7XG4gIGJvcmRlcjogbm9uZTtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogYXV0bztcbiAgcGFkZGluZzogMC41ZW07XG4gIGJvcmRlci1yYWRpdXM6IDNweDtcbiAgZm9udC1zaXplOiAxNXB4O1xuICBib3JkZXI6IDFweCBzb2xpZCAjODg4O1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XG5cbiAgJjpmb2N1cyB7XG4gICAgICBvdXRsaW5lOiAwO1xuICB9XG59XG5cbi5tYXB7XG4gIGhlaWdodDogMzAwcHg7XG4gIHdpZHRoOiAxMDAlO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIG92ZXJmbG93OiBoaWRkZW47XG59XG4ucm0tcGFkZGluZyB7XG4gIHBhZGRpbmc6IDBweCAhaW1wb3J0YW50O1xufVxuLnBldC1pdGVtLXRpdGxlIHtcbiAgLS1wYWRkaW5nLXN0YXJ0OiAwcHg7XG59XG5pb24tZ3JpZCwgaW9uLXJvdywgaW9uLWNvbCB7XG4gIHBhZGRpbmc6IDBweDtcbiAgbWFyZ2luOiAwcHg7XG59XG5pb24taXRlbSB7XG4gIC0tcGFkZGluZy1zdGFydDogMHB4O1xuICAtLWlubmVyLXBhZGRpbmctZW5kOiAwcHg7XG59XG4ucmFkaW8tYnRucy1yb3cge1xuICAuZXJyb3Ige1xuICAgIHBhZGRpbmc6IDBweCA1cHg7XG4gICAgbWFyZ2luOiAwcHg7XG4gIH1cbn1cbmlvbi10ZXh0YXJlYSB7XG4gIGJvcmRlcjogMXB4IHNvbGlkICNkZWRlZGU7XG4gIHBhZGRpbmctbGVmdDogMTBweDtcbiAgcGFkZGluZy1yaWdodDogMTBweDtcbiAgbWFyZ2luLXRvcDogMTZweDtcbn1cbi50aW1lLWNvbCB7XG4gIHBhZGRpbmctbGVmdDogNXB4O1xufVxuLmRhdGUtY29sIHtcbiAgcGFkZGluZy1yaWdodDogNXB4O1xufVxuLmxvb2staW5wdXQtaXRlbSAubG9vay1pbnB1dCB7XG4gIHBhZGRpbmc6IDEwcHggMCAxMXB4O1xufSJdfQ== */";
      /***/
    },

    /***/
    12032:
    /*!***********************************************************************************!*\
      !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/post-job/post-job.page.html ***!
      \***********************************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "<ion-header class=\"ion-no-border\" *ngIf=\"isMessagesContainerSectionLoaded\">\n    <ion-card\n        class=\"ion-no-margin\"\n        *ngIf=\"progressStepper?.profile == '0' || progressStepper?.email == '0' || progressStepper?.pet == '0' || progressStepper?.wallet == 0\"\n        style=\"background: #FFF3CD;\"\n    >\n        <ion-card-content>\n            <ion-text *ngIf=\"progressStepper?.profile == '0'\" size=\"12\">\n                Please complete your <a routerLink=\"/home/tabs/profile-menu\">profile</a> before posting a job\n            </ion-text>\n\n            <ion-text *ngIf=\"progressStepper?.profile != '0' && progressStepper?.email == 0\" size=\"12\">\n                Please complete your <a routerLink=\"/profile-email-verify\">verification</a> before posting a job\n            </ion-text>\n\n            <ion-text\n                *ngIf=\"progressStepper?.profile != '0' && progressStepper?.email != 0 && progressStepper?.pet == 0\"\n                size=\"12\">\n                Please create a <a routerLink=\"/pet-add\">pet profile</a> before posting a job\n            </ion-text>\n\n            <ion-text color=\"dark\"\n                *ngIf=\"progressStepper?.profile != '0' && progressStepper?.email != 0 && progressStepper?.pet != 0 && progressStepper?.wallet == 0\"\n                size=\"12\">\n                <b> <a (click)=\"goToAddMoney()\"> <u> Add Credits to your Wallet </u> </a> </b>\n                <br>\n                With your digital wallet, you have full control on your money.\n                Any funds you add will stay in your wallet until you authorise and confirm a job.\n                You can contact <a (click)=\"sendEmailtoAccounts()\">accounts@petcloud.com.au</a> at any time.\n\n            </ion-text>\n        </ion-card-content>\n    </ion-card>\n</ion-header>\n<ion-content class=\"ion-padding\">\n\n    <!-- <ng-container *ngIf=\"isMessagesContainerSectionLoaded\">\n        <ion-card\n            *ngIf=\"progressStepper?.profile == '0' || progressStepper?.email == '0' || progressStepper?.pet == '0' || progressStepper?.wallet == 0\"\n            style=\"background: #FFF3CD;\">\n            <ion-card-content>\n                <ion-text *ngIf=\"progressStepper?.profile == '0'\" size=\"12\">\n                    Please complete your <a routerLink=\"/home/tabs/profile-menu\">profile</a> before posting a job\n                </ion-text>\n\n                <ion-text *ngIf=\"progressStepper?.profile != '0' && progressStepper?.email == 0\" size=\"12\">\n                    Please complete your <a routerLink=\"/profile-email-verify\">verification</a> before posting a job\n                </ion-text>\n\n                <ion-text\n                    *ngIf=\"progressStepper?.profile != '0' && progressStepper?.email != 0 && progressStepper?.pet == 0\"\n                    size=\"12\">\n                    Please create a <a routerLink=\"/pet-add\">pet profile</a> before posting a job\n                </ion-text>\n\n                <ion-text color=\"dark\"\n                    *ngIf=\"progressStepper?.profile != '0' && progressStepper?.email != 0 && progressStepper?.pet != 0 && progressStepper?.wallet == 0\"\n                    size=\"12\">\n                    <b> <a (click)=\"goToAddMoney()\"> <u> Add Credits to your Wallet </u> </a> </b>\n                    <br>\n                    With your digital wallet, you have full control on your money.\n                    Any funds you add will stay in your wallet until you authorise and confirm a job.\n                    You can contact <a (click)=\"sendEmailtoAccounts()\">accounts@petcloud.com.au</a> at any time.\n\n                </ion-text>\n            </ion-card-content>\n        </ion-card>\n    </ng-container> -->\n\n\n    <form [formGroup]=\"jobPostingForm\">\n        <ion-grid>\n            <ion-row>\n                <ion-col>\n                    <ion-item>\n                        <ion-label position=\"stacked\">What service do you need?\n                            <small class=\"error\">*</small>\n                        </ion-label>\n\n                        <ion-select [compareWith]=\"compareWith\" formControlName=\"service_type_id\"\n                            (ionChange)=\"selectService($event)\" placeholder=\"Please select a service\"\n                            interface=\"action-sheet\">\n\n                            <ion-select-option class=\"fs-14\"\n                                *ngFor=\"let service of recurringOptions?.services, let idx = index\"\n                                [hidden]=\"service?.enabled != '1'\" [value]=\"service\">\n                                {{service?.serviceName}}\n                            </ion-select-option>\n                        </ion-select>\n                    </ion-item>\n                </ion-col>\n            </ion-row>\n\n            <ion-text lines=\"none\" class=\"animated fadeInUp\" *ngIf=\"is_service_type_id==true\">\n                <p class=\"error\"> Please Select Service</p>\n            </ion-text>\n\n            <ion-row class=\"radio-btns-row\">\n                <ion-col>\n                    <ion-radio-group color=\"theme\" formControlName=\"bookingType\" (ionChange)=\"selectMode($event)\">\n                        <ion-row class=\"ion-align-items-center\">\n                            <ion-col [hidden]=\"isOnceOff\" size=\"6\">\n                                <ion-item lines=\"none\">\n                                    <ion-radio color=\"theme\" value=\"0\"></ion-radio>\n                                    <ion-label> &nbsp;One Off</ion-label>\n                                </ion-item>\n                            </ion-col>\n                            <ion-col size=\"6\" [hidden]=\"!isRecurring\">\n                                <ion-item lines=\"none\">\n                                    <ion-radio color=\"theme\" value=\"1\"></ion-radio>\n                                    <ion-label> &nbsp;Recurring</ion-label>\n                                </ion-item>\n                            </ion-col>\n                        </ion-row>\n                    </ion-radio-group>\n                    <ion-text lines=\"none\" class=\"animated fadeInUp\" *ngIf=\"isbookingType\">\n                        <p class=\"error\"> Please Select Booking Type\n                        </p>\n                    </ion-text>\n                </ion-col>\n            </ion-row>\n\n            <ion-row>\n                <ion-col class=\"date-col\" (click)=\"openFromDateCalender('from_date')\" size=\"6\">\n                    <ion-item class=\"look-input-item\">\n                        <ion-label position=\"stacked\">Start Date<small class=\"error\">*</small></ion-label>\n                        <div class=\"look-input\">\n                            {{lbl_formatedStartDate | date: 'EEE dd MMM yyyy'}}\n                        </div>\n                    </ion-item>\n                    <ion-text class=\"animated fadeInUp error\"\n                        *ngIf=\"jobPostingForm.get('start_date').hasError('required')\">\n                        Select start date.\n                    </ion-text>\n                </ion-col>\n                <ion-col class=\"time-col\" size=\"6\">\n                    <ion-item>\n                        <ion-label position=\"stacked\">Start Time <small class=\"error\">*</small></ion-label>\n                        <ion-datetime #startFromTimePicker display-format=\"h:mm A\" [value]=\"startMinTime\"\n                            placeholder=\"9:15 AM\" picker-format=\"h:mm A\"                            \n                            formControlName=\"start_time\" \n                            (ionChange)=\"fromTimeChange(startFromTimePicker)\" minuteValues=\"0,15,30,45\">\n                        </ion-datetime>\n                    </ion-item>\n                    <ion-text class=\"animated fadeInUp error\"\n                        *ngIf=\"jobPostingForm.get('start_time').hasError('required') && jobPostingForm.get('start_time').touched\">\n                        Select start time.\n                    </ion-text>\n                    <ion-text class=\"animated fadeInUp error\"\n                        *ngIf=\"!isValidFromTime().isValidStart && jobPostingForm.get('start_time').touched\">\n                        The start time must be more than 1 hour from now.\n                    </ion-text>\n                </ion-col>\n            </ion-row>\n\n            <ion-row *ngIf=\"isEndDateTime\">\n                <ion-col class=\"date-col\" (click)=\"openToCalender('end_date')\" size=\"6\">\n                    <ion-item class=\"look-input-item\">\n                        <ion-label position=\"stacked\"> End Date <small class=\"error\">*</small></ion-label>\n                        <div class=\"look-input\">\n                            {{lbl_formatedEndDate | date: 'EEE dd MMM yyyy'}}\n                        </div>\n                    </ion-item>\n\n                    <ion-text class=\"animated fadeInUp error\"\n                        *ngIf=\"jobPostingForm.get('end_date').hasError('required')\">\n                        Select end time.</ion-text>\n                    <ion-text class=\"animated fadeInUp error\"\n                        *ngIf=\"!isValidFromTime().isValidEndDate\">\n                        The end date must be greater than start date.\n                    </ion-text>\n                </ion-col>\n\n                <ion-col class=\"time-col\" size=\"6\">\n                    <ion-item>\n                        <ion-label position=\"stacked\"> End Time<small class=\"error\">*</small></ion-label>\n                        <ion-datetime display-format=\"h:mm A\" placeholder=\"9:15 AM\" picker-format=\"h:mm A\"\n                            formControlName=\"end_time\" [value]=\"startTotime\" minuteValues=\"0,15,30,45\"></ion-datetime>\n                    </ion-item>\n\n                    <ion-text class=\"animated fadeInUp error\"\n                        *ngIf=\"jobPostingForm.get('end_time').hasError('required') && jobPostingForm.get('end_time').touched\">\n                        Select end time.</ion-text>\n                    <ion-text class=\"animated fadeInUp error\"\n                        *ngIf=\"!isValidFromTime().isValidEndTime && jobPostingForm.get('end_time').touched\">\n                        The end time must be more than 1 hour from start time.\n                    </ion-text>\n                </ion-col>\n            </ion-row>\n\n            <ion-grid *ngIf=\"isPetTaxi\">\n                <ion-row>\n                    <ion-col size=\"12\">\n                        <input type=\"search\" [options]='options' ngx-google-places-autocomplete #placesRef=\"ngx-places\"\n                            clearInput [ngModelOptions]=\"{standalone: true}\" [(ngModel)]=\"pickupLocation\"\n                            (focus)=\"isFooterShown()\"\n                            placeholder=\"Enter Pick up Address\" class=\"search-input native-input sc-ion-input-md\"\n                            (onAddressChange)=\"handleAddressChange('start_location',$event)\" id=\"suburb\" />\n                        <i class=\"counts fs-12\"></i>\n                    </ion-col>\n                </ion-row>\n\n                <ion-row>\n                    <ion-col size=\"12\">\n                        <input type=\"search\" [options]='options' ngx-google-places-autocomplete #placesRef=\"ngx-places\"\n                            clearInput [ngModelOptions]=\"{standalone: true}\" [(ngModel)]=\"destinationLocation\"\n                            (focus)=\"isFooterShown()\"\n                            placeholder=\"Enter Destination Address\" class=\"search-input native-input sc-ion-input-md\"\n                            (onAddressChange)=\"handleAddressChange('end_location',$event)\" id=\"suburb\" />\n                        <i class=\"counts fs-12\"></i>\n                    </ion-col>\n                </ion-row>\n\n                <div [hidden]=\"!googleMapShown\">\n                    <div #mapElement class=\"map\"></div>\n                    <ion-row>\n                        <ion-col size=\"12\">\n                            <ion-label position=\"stacked\"> Distance: {{distanceForPetTaxi}}</ion-label>\n                        </ion-col>\n                        <ion-col size=\"12\">\n                            <ion-label position=\"stacked\"> Trip time: {{travelTime}}</ion-label>\n                        </ion-col>\n                    </ion-row>\n                </div>\n            </ion-grid>\n\n\n\n            <div *ngIf=\"ServiceChargeType != '0'\">\n\n                <ion-row *ngIf=\"selectedMode == 0  && !isPetTaxi\">\n                    <ion-col>\n                        <ion-item>\n                            <ion-label position=\"stacked\">Select Days <small class=\"error\">*</small></ion-label>\n                            <ion-select color=\"theme\" formControlName=\"recurring_type\" (ionChange)=\"selectDays($event)\"\n                                placeholder=\"Select Days\" interface=\"action-sheet\">\n                                <ion-select-option class=\"fs-14\" *ngFor=\"let recurring of recurringOptions?.oneoff\"\n                                    [value]=\"recurring?.shortName\">{{recurring?.LongName}}\n                                </ion-select-option>\n                            </ion-select>\n                        </ion-item>\n                    </ion-col>\n                </ion-row>\n                <ion-row *ngIf=\"selectedMode == 1 && !isPetTaxi\">\n                    <ion-col>\n                        <ion-item>\n                            <ion-label position=\"stacked\">Select Days <small class=\"error\">*</small></ion-label>\n                            <ion-select color=\"theme\" formControlName=\"recurring_type\" (ionChange)=\"selectDays($event)\"\n                                placeholder=\"Select Days\" interface=\"action-sheet\">\n                                <ion-select-option class=\"fs-14\"\n                                    *ngFor=\"let recurring of recurringOptions?.recurring_type\"\n                                    [value]=\"recurring?.shortName\">{{recurring?.LongName}}\n                                </ion-select-option>\n                            </ion-select>\n                        </ion-item>\n                    </ion-col>\n                </ion-row>\n                <ion-text lines=\"none\" class=\"animated fadeInUp\" *ngIf=\"is_recurringType==true\">\n                    <p class=\"error\"> Please Select Booking Days</p>\n                </ion-text>\n\n                <ion-row *ngIf=\"isCustomDays && !isPetTaxi\">\n                    <ion-col>\n                        <ion-item>\n                            <ion-label position=\"stacked\">Custom Days</ion-label>\n                            <ion-select interface=\"action-sheet\" color=\"theme\" [multiple]=\"isMultipleDays == true ? true :\n                                false\" formControlName=\"booking_days\" (ionChange)=\"customDays($event)\"\n                                placeholder=\"Custom Days\">\n                                <ion-select-option value=\"0\">Sunday</ion-select-option>\n                                <ion-select-option value=\"1\">Monday</ion-select-option>\n                                <ion-select-option value=\"2\">Tuesday</ion-select-option>\n                                <ion-select-option value=\"3\">Wednesday</ion-select-option>\n                                <ion-select-option value=\"4\">Thursday</ion-select-option>\n                                <ion-select-option value=\"5\">Friday</ion-select-option>\n                                <ion-select-option value=\"6\">Saturday</ion-select-option>\n                            </ion-select>\n                        </ion-item>\n                    </ion-col>\n                </ion-row>\n                <ion-text lines=\"none\" class=\"animated fadeInUp\" *ngIf=\"is_booking_days\">\n                    <p class=\"error\"> Please Select Days</p>\n                </ion-text>\n            </div>\n\n            <ion-row>\n                <ion-col>\n                    <ion-item lines=\"none\" class=\"pet-item-title\">\n                        <ion-label *ngIf=\"isPetTaxi\"> Pets Travelling <small class=\"error\">*</small></ion-label>\n                        <ion-label *ngIf=\"!isPetTaxi\">Pets <small class=\"error\">*</small></ion-label>\n                    </ion-item>\n\n                    <div [hidden]=\"!isNoPets\">\n                        <ion-text class=\"error\" routerLink=\"/pet-add\">No Pets Added. Please Add Pet <span\n                                class=\"link-contrast\"> (Click Here)*</span></ion-text>\n                    </div>\n                    <div class=\"petList\">\n                        <ion-item lines=\"full\" *ngFor=\"let pet of petList\" class=\"petItem\">\n                            <ion-thumbnail slot=\"start\" class=\"petProfile\">\n\n                                <ion-img [src]=\"pet.imagename == '' || pet.imagename == null  ? \n                                'https://dev.petcloud.com.au/img/pet_placeholder.png' \n                                : pet?.imagename\"></ion-img>\n\n                            </ion-thumbnail>\n                            <ion-label>{{pet?.name}}</ion-label>\n                            <ion-checkbox slot=\"end\" checked color=\"theme\" (ionChange)=\"onPetSelectChange($event,pet)\">\n                            </ion-checkbox>\n                        </ion-item>\n                        <ion-text [hidden]=\"selectedPetIds.length > 0\" lines=\"none\" class=\"animated fadeInUp\">\n                            <p class=\"error\">Please select Pets </p>\n                        </ion-text>\n                    </div>\n                </ion-col>\n            </ion-row>\n\n\n\n            <div *ngIf=\"isPetTaxi\" style=\"display: flex;margin-left: 15px;\">\n                <ion-checkbox style=\"margin-top: 10px;\" color=\"primary\" (ionChange)=\"onPetTaxiAgreement($event)\" checked slot=\"start\">\n                </ion-checkbox>\n                <ion-label style=\"padding-left: 10px;font-size: 14px;\" >I agree to the <span (click)=\"petTaxiAgreement()\"\n                        class=\"text-theme \">Pet Safety & Cleaning <br> Terms & Conditions</span>\n                </ion-label>\n            </div>\n\n\n            <ion-row *ngIf=\"googleMapShown && isPetTaxi\">\n                <ion-col>\n                    <p style=\"color: #52C4BE;\"> Fare Estimation : ${{estimationTaxiPrice | number:'1.2-2' }} </p>\n                </ion-col>\n        </ion-row>\n\n            <ion-row>\n                <ion-col>\n                    <ion-item lines=\"none\" class=\"text-area-item\">\n                        <ion-label position=\"stacked\">Any Special Requirements</ion-label>\n                        <ion-textarea rows=\"3\" formControlName=\"description\" placeholder=\"enter description\">\n                        </ion-textarea>\n                    </ion-item>\n                </ion-col>\n            </ion-row>\n           \n            <ion-row *ngIf=\"hideCosts && is_booking_days == false && !isPetTaxi\">\n                <ion-col>\n                    <div>\n                        <ng-container *ngIf=\"selectedPetIds.length > 0\">\n                            <p *ngIf=\"isrecurringSelected && recurringOption != ''\"> Weekly Estimate : $\n                                {{isNaN(weeklyEstimatedCost) ? '0' : weeklyEstimatedCost}}</p>\n                            <p *ngIf=\"!isrecurringSelected\">Total Estimated Cost : $ {{isNaN(totalEstimatedCost) ? '0' :\n                                totalEstimatedCost}}</p>\n                            <p *ngIf=\"isrecurringSelected && recurringOption == ''\"> Total Estimated Cost : $\n                                {{isNaN(totalEstimatedCost) ? '0' : totalEstimatedCost}} </p>\n                        </ng-container>\n\n                    </div>\n                </ion-col>\n            </ion-row>\n\n           \n        </ion-grid>\n    </form>\n</ion-content>\n\n\n<ion-footer *ngIf=\"isCreateButtonShown\" >\n    <ion-toolbar class=\"ion-no-padding rm-padding\">\n        <ion-button class=\"text-capitalize fls-0 fs-18\" size=\"large\" expand=\"full\" color=\"theme\"\n            [disabled]=\"!isFormValid \n            || !isValidFromTime().isValidStart \n            || !isValidFromTime().isValidEndDate \n            || !isValidFromTime().isValidEndTime\"\n            (click)=\"createJob()\"\n        >\n            Post a Job\n        </ion-button>\n    </ion-toolbar>\n</ion-footer>\n\n\n";
      /***/
    }
  }]);
})();
//# sourceMappingURL=src_app_post-job_post-job_module_ts-es5.js.map